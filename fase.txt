# Prompt per Claude Code - Fase 3: Design System e UI Components

## 🎯 Obiettivo della Fase
Creare un design system avanzato e componenti UI per InsightLearn.Cloud che superi Udemy in termini di user experience, performance e design moderno. Focus su Blazor Hybrid con componenti riutilizabili, design tokens avanzati e animazioni fluide.

## ⚙️ Configurazioni Operative per Debian

### Sistema di Logging e Error Handling
- **OBBLIGATORIO**: Ogni comando deve generare log dettagliato con timestamp
- **TIMEOUT**: Comandi di build hanno timeout di 300 secondi, altri comandi 60 secondi
- **BUILD VERIFICATION**: Ogni componente creato deve essere compilabile senza errori
- **BROWSER TESTING**: Test automatico di rendering per componenti critici

### Template di Esecuzione
```bash
#!/bin/bash
set -e
set -u

# Setup logging
LOG_FILE="logs/phase3_design_$(date +%Y%m%d_%H%M%S).log"
mkdir -p logs
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE")

echo "=== [$(date)] PHASE 3 DESIGN SYSTEM START ===" | tee -a "$LOG_FILE"

# Sudo password per operazioni sistema
SUDO_PASS="SS1-Temp1234"

# Contatori per tracking
COMPONENTS_CREATED=0
COMPONENTS_TESTED=0
BUILD_ERRORS=0

sudo_cmd() {
    echo "$SUDO_PASS" | sudo -S "$@" 2>/dev/null || sudo "$@"
}

timeout_cmd() {
    local timeout_duration=${1:-60}
    shift
    timeout ${timeout_duration}s "$@"
    local exit_code=$?
    if [ $exit_code -eq 124 ]; then
        echo "ERROR: Command timed out after ${timeout_duration} seconds" | tee -a "$LOG_FILE"
        return 124
    fi
    return $exit_code
}

# Verifica build dopo ogni componente
verify_build() {
    local component_name="$1"
    echo "Verifying build for $component_name..." | tee -a "$LOG_FILE"
    
    cd src/InsightLearn.Web
    if timeout_cmd 300 dotnet build --no-restore > /dev/null 2>&1; then
        echo "✅ Build successful for $component_name" | tee -a "$LOG_FILE"
        ((COMPONENTS_TESTED++))
        return 0
    else
        echo "❌ Build failed for $component_name" | tee -a "$LOG_FILE"
        ((BUILD_ERRORS++))
        return 1
    fi
    cd ../..
}

# Verifica directory di lavoro
if [ ! -d "InsightLearn.Cloud" ]; then
    echo "ERROR: Directory InsightLearn.Cloud non trovata" | tee -a "$LOG_FILE"
    exit 1
fi

cd InsightLearn.Cloud
echo "Working directory: $(pwd)" | tee -a "$LOG_FILE"
```

## 📋 FASE 3: DESIGN SYSTEM E UI COMPONENTS

### STEP 3.1: Setup Design System Foundation

**Comando da eseguire:**
```bash
#!/bin/bash
# phase3_step1_design_foundation.sh

# [Include template di configurazione sopra]

echo "=== STEP 3.1: Design System Foundation ===" | tee -a "$LOG_FILE"

# Verifica che i progetti base esistano
if [ ! -f "src/InsightLearn.Web/InsightLearn.Web.csproj" ]; then
    echo "ERROR: Progetto Web non trovato. Eseguire prima le fasi precedenti." | tee -a "$LOG_FILE"
    exit 1
fi

cd src/InsightLearn.Web

# Installare MudBlazor per componenti base avanzati
echo "Installing MudBlazor and design dependencies..." | tee -a "$LOG_FILE"
timeout_cmd 120 dotnet add package MudBlazor
timeout_cmd 120 dotnet add package MudBlazor.ThemeManager

# Creare struttura directory per design system
echo "Creating design system directory structure..." | tee -a "$LOG_FILE"
mkdir -p wwwroot/css/design-system
mkdir -p wwwroot/js/design-system
mkdir -p wwwroot/assets/icons
mkdir -p wwwroot/assets/images
mkdir -p Components/DesignSystem
mkdir -p Components/DesignSystem/Atoms
mkdir -p Components/DesignSystem/Molecules
mkdir -p Components/DesignSystem/Organisms
mkdir -p Components/DesignSystem/Templates
mkdir -p Services/Design

# Creare CSS Design Tokens
echo "Creating design tokens CSS..." | tee -a "$LOG_FILE"
cat > wwwroot/css/design-system/design-tokens.css << 'EOF'
/* ============================================
   InsightLearn.Cloud - Design Tokens
   Superior to Udemy Design System
   ============================================ */

:root {
  /* ===== COLORI PRIMARI ===== */
  --il-primary-50: #f0f9ff;
  --il-primary-100: #e0f2fe;
  --il-primary-200: #bae6fd;
  --il-primary-300: #7dd3fc;
  --il-primary-400: #38bdf8;
  --il-primary-500: #0ea5e9;
  --il-primary-600: #0284c7;
  --il-primary-700: #0369a1;
  --il-primary-800: #075985;
  --il-primary-900: #0c4a6e;
  --il-primary-950: #082f49;

  /* ===== COLORI SECONDARI ===== */
  --il-secondary-50: #fdf4ff;
  --il-secondary-100: #fae8ff;
  --il-secondary-200: #f5d0fe;
  --il-secondary-300: #f0abfc;
  --il-secondary-400: #e879f9;
  --il-secondary-500: #d946ef;
  --il-secondary-600: #c026d3;
  --il-secondary-700: #a21caf;
  --il-secondary-800: #86198f;
  --il-secondary-900: #701a75;

  /* ===== GRAYSCALE PREMIUM ===== */
  --il-gray-0: #ffffff;
  --il-gray-25: #fcfcfc;
  --il-gray-50: #f9fafb;
  --il-gray-100: #f3f4f6;
  --il-gray-200: #e5e7eb;
  --il-gray-300: #d1d5db;
  --il-gray-400: #9ca3af;
  --il-gray-500: #6b7280;
  --il-gray-600: #4b5563;
  --il-gray-700: #374151;
  --il-gray-800: #1f2937;
  --il-gray-900: #111827;
  --il-gray-950: #030712;

  /* ===== SEMANTIC COLORS ===== */
  --il-success: #10b981;
  --il-success-light: #d1fae5;
  --il-success-dark: #065f46;
  
  --il-warning: #f59e0b;
  --il-warning-light: #fef3c7;
  --il-warning-dark: #92400e;
  
  --il-error: #ef4444;
  --il-error-light: #fee2e2;
  --il-error-dark: #991b1b;
  
  --il-info: #3b82f6;
  --il-info-light: #dbeafe;
  --il-info-dark: #1e40af;

  /* ===== GRADIENTS SUPERIORI A UDEMY ===== */
  --il-gradient-primary: linear-gradient(135deg, var(--il-primary-500) 0%, var(--il-primary-700) 100%);
  --il-gradient-secondary: linear-gradient(135deg, var(--il-secondary-500) 0%, var(--il-secondary-700) 100%);
  --il-gradient-hero: linear-gradient(135deg, var(--il-primary-600) 0%, var(--il-secondary-600) 50%, var(--il-primary-800) 100%);
  --il-gradient-card: linear-gradient(145deg, var(--il-gray-50) 0%, var(--il-gray-100) 100%);
  --il-gradient-dark-card: linear-gradient(145deg, var(--il-gray-800) 0%, var(--il-gray-900) 100%);

  /* ===== GLASS MORPHISM AVANZATO ===== */
  --il-glass-bg-light: rgba(255, 255, 255, 0.25);
  --il-glass-bg-dark: rgba(31, 41, 55, 0.25);
  --il-glass-border-light: rgba(255, 255, 255, 0.18);
  --il-glass-border-dark: rgba(255, 255, 255, 0.1);
  --il-glass-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  --il-backdrop-blur: blur(20px);

  /* ===== NEUMORPHISM ELEMENTS ===== */
  --il-neuro-light-shadow: 20px 20px 60px #d1d9e6, -20px -20px 60px #ffffff;
  --il-neuro-dark-shadow: 20px 20px 60px #0f1419, -20px -20px 60px #2d3748;
  --il-neuro-inset-light: inset 20px 20px 60px #d1d9e6, inset -20px -20px 60px #ffffff;
  --il-neuro-inset-dark: inset 20px 20px 60px #0f1419, inset -20px -20px 60px #2d3748;

  /* ===== TYPOGRAPHY SCALE ===== */
  --il-font-family-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  --il-font-family-mono: 'JetBrains Mono', 'Fira Code', 'Courier New', monospace;
  
  /* Font Sizes - Perfect Scale */
  --il-text-xs: 0.75rem;    /* 12px */
  --il-text-sm: 0.875rem;   /* 14px */
  --il-text-base: 1rem;     /* 16px */
  --il-text-lg: 1.125rem;   /* 18px */
  --il-text-xl: 1.25rem;    /* 20px */
  --il-text-2xl: 1.5rem;    /* 24px */
  --il-text-3xl: 1.875rem;  /* 30px */
  --il-text-4xl: 2.25rem;   /* 36px */
  --il-text-5xl: 3rem;      /* 48px */
  --il-text-6xl: 3.75rem;   /* 60px */
  --il-text-7xl: 4.5rem;    /* 72px */

  /* Font Weights */
  --il-font-thin: 100;
  --il-font-light: 300;
  --il-font-normal: 400;
  --il-font-medium: 500;
  --il-font-semibold: 600;
  --il-font-bold: 700;
  --il-font-extrabold: 800;
  --il-font-black: 900;

  /* Line Heights */
  --il-leading-none: 1;
  --il-leading-tight: 1.25;
  --il-leading-snug: 1.375;
  --il-leading-normal: 1.5;
  --il-leading-relaxed: 1.625;
  --il-leading-loose: 2;

  /* ===== SPACING SYSTEM ===== */
  --il-space-0: 0;
  --il-space-1: 0.25rem;   /* 4px */
  --il-space-2: 0.5rem;    /* 8px */
  --il-space-3: 0.75rem;   /* 12px */
  --il-space-4: 1rem;      /* 16px */
  --il-space-5: 1.25rem;   /* 20px */
  --il-space-6: 1.5rem;    /* 24px */
  --il-space-8: 2rem;      /* 32px */
  --il-space-10: 2.5rem;   /* 40px */
  --il-space-12: 3rem;     /* 48px */
  --il-space-16: 4rem;     /* 64px */
  --il-space-20: 5rem;     /* 80px */
  --il-space-24: 6rem;     /* 96px */
  --il-space-32: 8rem;     /* 128px */

  /* ===== BORDER RADIUS ===== */
  --il-radius-none: 0;
  --il-radius-sm: 0.125rem;   /* 2px */
  --il-radius-base: 0.25rem;  /* 4px */
  --il-radius-md: 0.375rem;   /* 6px */
  --il-radius-lg: 0.5rem;     /* 8px */
  --il-radius-xl: 0.75rem;    /* 12px */
  --il-radius-2xl: 1rem;      /* 16px */
  --il-radius-3xl: 1.5rem;    /* 24px */
  --il-radius-full: 9999px;

  /* ===== SHADOWS AVANZATE ===== */
  --il-shadow-xs: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --il-shadow-sm: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  --il-shadow-base: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --il-shadow-md: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  --il-shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  --il-shadow-xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  --il-shadow-2xl: 0 50px 100px -20px rgba(0, 0, 0, 0.25);
  --il-shadow-inner: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06);

  /* ===== ANIMATIONS E TIMING ===== */
  --il-duration-75: 75ms;
  --il-duration-100: 100ms;
  --il-duration-150: 150ms;
  --il-duration-200: 200ms;
  --il-duration-300: 300ms;
  --il-duration-500: 500ms;
  --il-duration-700: 700ms;
  --il-duration-1000: 1000ms;

  /* Easing Functions Avanzate */
  --il-ease-linear: linear;
  --il-ease-in: cubic-bezier(0.4, 0, 1, 1);
  --il-ease-out: cubic-bezier(0, 0, 0.2, 1);
  --il-ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
  --il-ease-spring: cubic-bezier(0.68, -0.55, 0.265, 1.55);
  --il-ease-bounce: cubic-bezier(0.68, -0.6, 0.32, 1.6);

  /* ===== BREAKPOINTS ===== */
  --il-screen-xs: 475px;
  --il-screen-sm: 640px;
  --il-screen-md: 768px;
  --il-screen-lg: 1024px;
  --il-screen-xl: 1280px;
  --il-screen-2xl: 1536px;

  /* ===== Z-INDEX LAYERS ===== */
  --il-z-0: 0;
  --il-z-10: 10;
  --il-z-20: 20;
  --il-z-30: 30;
  --il-z-40: 40;
  --il-z-50: 50;
  --il-z-modal: 1000;
  --il-z-popover: 1010;
  --il-z-tooltip: 1020;
  --il-z-toast: 1030;
}

/* ===== DARK MODE VARIABLES ===== */
[data-theme="dark"] {
  --il-bg-primary: var(--il-gray-900);
  --il-bg-secondary: var(--il-gray-800);
  --il-bg-tertiary: var(--il-gray-700);
  
  --il-text-primary: var(--il-gray-50);
  --il-text-secondary: var(--il-gray-300);
  --il-text-tertiary: var(--il-gray-400);
  
  --il-border-primary: var(--il-gray-700);
  --il-border-secondary: var(--il-gray-600);
  
  --il-glass-bg: var(--il-glass-bg-dark);
  --il-glass-border: var(--il-glass-border-dark);
  --il-neuro-shadow: var(--il-neuro-dark-shadow);
  --il-neuro-inset: var(--il-neuro-inset-dark);
}

/* ===== LIGHT MODE VARIABLES (DEFAULT) ===== */
[data-theme="light"], :root {
  --il-bg-primary: var(--il-gray-0);
  --il-bg-secondary: var(--il-gray-50);
  --il-bg-tertiary: var(--il-gray-100);
  
  --il-text-primary: var(--il-gray-900);
  --il-text-secondary: var(--il-gray-700);
  --il-text-tertiary: var(--il-gray-600);
  
  --il-border-primary: var(--il-gray-200);
  --il-border-secondary: var(--il-gray-300);
  
  --il-glass-bg: var(--il-glass-bg-light);
  --il-glass-border: var(--il-glass-border-light);
  --il-neuro-shadow: var(--il-neuro-light-shadow);
  --il-neuro-inset: var(--il-neuro-inset-light);
}
EOF

# Creare CSS per componenti base
echo "Creating base component styles..." | tee -a "$LOG_FILE"
cat > wwwroot/css/design-system/components.css << 'EOF'
/* ============================================
   InsightLearn.Cloud - Component Styles
   ============================================ */

/* ===== RESET E BASE ===== */
*, *::before, *::after {
  box-sizing: border-box;
}

* {
  margin: 0;
  padding: 0;
}

html {
  color-scheme: light dark;
}

body {
  font-family: var(--il-font-family-primary);
  font-size: var(--il-text-base);
  line-height: var(--il-leading-normal);
  color: var(--il-text-primary);
  background-color: var(--il-bg-primary);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* ===== UTILITY CLASSES ===== */
.il-glass {
  background: var(--il-glass-bg);
  backdrop-filter: var(--il-backdrop-blur);
  -webkit-backdrop-filter: var(--il-backdrop-blur);
  border: 1px solid var(--il-glass-border);
  box-shadow: var(--il-glass-shadow);
}

.il-neuro {
  background: var(--il-bg-secondary);
  box-shadow: var(--il-neuro-shadow);
  transition: all var(--il-duration-300) var(--il-ease-out);
}

.il-neuro:active {
  box-shadow: var(--il-neuro-inset);
}

.il-gradient-primary {
  background: var(--il-gradient-primary);
}

.il-gradient-secondary {
  background: var(--il-gradient-secondary);
}

.il-gradient-hero {
  background: var(--il-gradient-hero);
}

/* ===== BUTTON COMPONENTS ===== */
.il-btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--il-space-2);
  padding: var(--il-space-3) var(--il-space-6);
  border: none;
  border-radius: var(--il-radius-lg);
  font-family: var(--il-font-family-primary);
  font-size: var(--il-text-base);
  font-weight: var(--il-font-medium);
  line-height: var(--il-leading-tight);
  text-decoration: none;
  white-space: nowrap;
  cursor: pointer;
  transition: all var(--il-duration-200) var(--il-ease-out);
  user-select: none;
  position: relative;
  overflow: hidden;
}

.il-btn:focus {
  outline: 2px solid var(--il-primary-500);
  outline-offset: 2px;
}

.il-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none !important;
}

/* Button Variants */
.il-btn-primary {
  background: var(--il-gradient-primary);
  color: white;
  box-shadow: var(--il-shadow-base);
}

.il-btn-primary:hover:not(:disabled) {
  box-shadow: var(--il-shadow-lg);
  transform: translateY(-2px);
}

.il-btn-primary:active:not(:disabled) {
  transform: translateY(0);
  box-shadow: var(--il-shadow-sm);
}

.il-btn-secondary {
  background: var(--il-bg-secondary);
  color: var(--il-text-primary);
  border: 1px solid var(--il-border-primary);
  box-shadow: var(--il-shadow-sm);
}

.il-btn-secondary:hover:not(:disabled) {
  background: var(--il-bg-tertiary);
  box-shadow: var(--il-shadow-base);
  transform: translateY(-1px);
}

.il-btn-glass {
  background: var(--il-glass-bg);
  backdrop-filter: var(--il-backdrop-blur);
  -webkit-backdrop-filter: var(--il-backdrop-blur);
  border: 1px solid var(--il-glass-border);
  color: var(--il-text-primary);
  box-shadow: var(--il-glass-shadow);
}

.il-btn-glass:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 12px 40px 0 rgba(31, 38, 135, 0.5);
}

.il-btn-neuro {
  background: var(--il-bg-secondary);
  color: var(--il-text-primary);
  box-shadow: var(--il-neuro-shadow);
  border: none;
}

.il-btn-neuro:hover:not(:disabled) {
  transform: translateY(-1px);
}

.il-btn-neuro:active:not(:disabled) {
  box-shadow: var(--il-neuro-inset);
  transform: translateY(1px);
}

/* Button Sizes */
.il-btn-xs {
  padding: var(--il-space-1) var(--il-space-3);
  font-size: var(--il-text-xs);
  border-radius: var(--il-radius-base);
}

.il-btn-sm {
  padding: var(--il-space-2) var(--il-space-4);
  font-size: var(--il-text-sm);
  border-radius: var(--il-radius-md);
}

.il-btn-lg {
  padding: var(--il-space-4) var(--il-space-8);
  font-size: var(--il-text-lg);
  border-radius: var(--il-radius-xl);
}

.il-btn-xl {
  padding: var(--il-space-5) var(--il-space-10);
  font-size: var(--il-text-xl);
  border-radius: var(--il-radius-2xl);
}

/* ===== CARD COMPONENTS ===== */
.il-card {
  background: var(--il-bg-primary);
  border: 1px solid var(--il-border-primary);
  border-radius: var(--il-radius-xl);
  box-shadow: var(--il-shadow-sm);
  overflow: hidden;
  transition: all var(--il-duration-300) var(--il-ease-out);
}

.il-card:hover {
  box-shadow: var(--il-shadow-lg);
  transform: translateY(-4px);
}

.il-card-glass {
  background: var(--il-glass-bg);
  backdrop-filter: var(--il-backdrop-blur);
  -webkit-backdrop-filter: var(--il-backdrop-blur);
  border: 1px solid var(--il-glass-border);
  box-shadow: var(--il-glass-shadow);
}

.il-card-neuro {
  background: var(--il-bg-secondary);
  border: none;
  box-shadow: var(--il-neuro-shadow);
}

.il-card-header {
  padding: var(--il-space-6);
  border-bottom: 1px solid var(--il-border-primary);
}

.il-card-body {
  padding: var(--il-space-6);
}

.il-card-footer {
  padding: var(--il-space-6);
  border-top: 1px solid var(--il-border-primary);
  background: var(--il-bg-secondary);
}

/* ===== INPUT COMPONENTS ===== */
.il-input {
  width: 100%;
  padding: var(--il-space-3) var(--il-space-4);
  border: 1px solid var(--il-border-primary);
  border-radius: var(--il-radius-lg);
  font-family: var(--il-font-family-primary);
  font-size: var(--il-text-base);
  background: var(--il-bg-primary);
  color: var(--il-text-primary);
  transition: all var(--il-duration-200) var(--il-ease-out);
}

.il-input:focus {
  outline: none;
  border-color: var(--il-primary-500);
  box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);
}

.il-input:placeholder {
  color: var(--il-text-tertiary);
}

/* ===== NAVIGATION COMPONENTS ===== */
.il-nav {
  display: flex;
  align-items: center;
  gap: var(--il-space-6);
  padding: var(--il-space-4) var(--il-space-6);
  background: var(--il-glass-bg);
  backdrop-filter: var(--il-backdrop-blur);
  -webkit-backdrop-filter: var(--il-backdrop-blur);
  border-bottom: 1px solid var(--il-glass-border);
  position: sticky;
  top: 0;
  z-index: var(--il-z-50);
}

.il-nav-item {
  padding: var(--il-space-2) var(--il-space-4);
  border-radius: var(--il-radius-lg);
  text-decoration: none;
  color: var(--il-text-secondary);
  font-weight: var(--il-font-medium);
  transition: all var(--il-duration-200) var(--il-ease-out);
}

.il-nav-item:hover {
  color: var(--il-text-primary);
  background: var(--il-bg-secondary);
}

.il-nav-item.active {
  color: var(--il-primary-600);
  background: var(--il-primary-50);
}

/* ===== ANIMATION UTILITIES ===== */
@keyframes il-fade-in {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes il-slide-up {
  from { 
    opacity: 0; 
    transform: translateY(20px); 
  }
  to { 
    opacity: 1; 
    transform: translateY(0); 
  }
}

@keyframes il-scale-in {
  from { 
    opacity: 0; 
    transform: scale(0.9); 
  }
  to { 
    opacity: 1; 
    transform: scale(1); 
  }
}

@keyframes il-bounce-in {
  0% { 
    opacity: 0; 
    transform: scale(0.3); 
  }
  50% { 
    opacity: 1; 
    transform: scale(1.05); 
  }
  70% { 
    transform: scale(0.9); 
  }
  100% { 
    opacity: 1; 
    transform: scale(1); 
  }
}

.il-animate-fade-in {
  animation: il-fade-in var(--il-duration-300) var(--il-ease-out);
}

.il-animate-slide-up {
  animation: il-slide-up var(--il-duration-500) var(--il-ease-out);
}

.il-animate-scale-in {
  animation: il-scale-in var(--il-duration-300) var(--il-ease-spring);
}

.il-animate-bounce-in {
  animation: il-bounce-in var(--il-duration-700) var(--il-ease-bounce);
}

/* ===== RESPONSIVE UTILITIES ===== */
@media (max-width: 768px) {
  .il-btn {
    padding: var(--il-space-3) var(--il-space-4);
    font-size: var(--il-text-sm);
  }
  
  .il-card {
    border-radius: var(--il-radius-lg);
  }
  
  .il-card-header,
  .il-card-body,
  .il-card-footer {
    padding: var(--il-space-4);
  }
  
  .il-nav {
    padding: var(--il-space-3) var(--il-space-4);
    gap: var(--il-space-4);
  }
}

/* ===== ACCESSIBILITY ===== */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* ===== FOCUS STYLES ===== */
.il-focus:focus {
  outline: 2px solid var(--il-primary-500);
  outline-offset: 2px;
  border-radius: var(--il-radius-base);
}

/* ===== LOADING STATES ===== */
.il-loading {
  position: relative;
  pointer-events: none;
}

.il-loading::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 20px;
  height: 20px;
  margin: -10px 0 0 -10px;
  border: 2px solid transparent;
  border-top: 2px solid var(--il-primary-500);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
EOF

# Creare JavaScript per theme switching e utilities
echo "Creating design system JavaScript utilities..." | tee -a "$LOG_FILE"
cat > wwwroot/js/design-system/theme-manager.js << 'EOF'
/**
 * InsightLearn.Cloud - Theme Manager
 * Superior theme switching and design system utilities
 */

class InsightLearnThemeManager {
    constructor() {
        this.currentTheme = this.getStoredTheme() || this.getSystemTheme();
        this.init();
    }

    init() {
        this.applyTheme(this.currentTheme);
        this.setupThemeToggle();
        this.setupSystemThemeListener();
        this.setupAnimationUtils();
    }

    getSystemTheme() {
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }

    getStoredTheme() {
        return localStorage.getItem('il-theme');
    }

    storeTheme(theme) {
        localStorage.setItem('il-theme', theme);
    }

    applyTheme(theme) {
        document.documentElement.setAttribute('data-theme', theme);
        this.currentTheme = theme;
        this.storeTheme(theme);
        
        // Trigger custom event for components
        window.dispatchEvent(new CustomEvent('il-theme-changed', { 
            detail: { theme } 
        }));
    }

    toggleTheme() {
        const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';
        this.applyTheme(newTheme);
        
        // Add smooth transition effect
        document.documentElement.style.transition = 'background-color 0.3s ease, color 0.3s ease';
        setTimeout(() => {
            document.documentElement.style.transition = '';
        }, 300);
    }

    setupThemeToggle() {
        // Find theme toggle buttons
        const themeToggles = document.querySelectorAll('[data-theme-toggle]');
        themeToggles.forEach(toggle => {
            toggle.addEventListener('click', () => this.toggleTheme());
        });
    }

    setupSystemThemeListener() {
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
            if (!this.getStoredTheme()) {
                this.applyTheme(e.matches ? 'dark' : 'light');
            }
        });
    }

    setupAnimationUtils() {
        // Setup intersection observer for scroll animations
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('il-animate-slide-up');
                }
            });
        }, observerOptions);

        // Observe elements with animation class
        document.querySelectorAll('.il-animate-on-scroll').forEach(el => {
            observer.observe(el);
        });
    }

    // Utility methods for components
    addGlassEffect(element) {
        element.classList.add('il-glass');
    }

    addNeuroEffect(element) {
        element.classList.add('il-neuro');
    }

    addHoverEffect(element, effect = 'scale') {
        element.addEventListener('mouseenter', () => {
            switch(effect) {
                case 'scale':
                    element.style.transform = 'scale(1.05)';
                    break;
                case 'lift':
                    element.style.transform = 'translateY(-4px)';
                    break;
                case 'glow':
                    element.style.boxShadow = '0 0 20px rgba(14, 165, 233, 0.3)';
                    break;
            }
        });

        element.addEventListener('mouseleave', () => {
            element.style.transform = '';
            element.style.boxShadow = '';
        });
    }

    // Performance utilities
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
}

// Initialize theme manager when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    window.ilTheme = new InsightLearnThemeManager();
});

// Export for module usage
if (typeof module !== 'undefined' && module.exports) {
    module.exports = InsightLearnThemeManager;
}
EOF

# Aggiornare il file Program.cs per includere MudBlazor
echo "Updating Program.cs with MudBlazor configuration..." | tee -a "$LOG_FILE"
cp Program.cs Program.cs.backup

cat > Program.cs << 'EOF'
using MudBlazor.Services;
using InsightLearn.Web.Components;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container
builder.Services.AddRazorComponents()
    .AddInteractiveServerComponents()
    .AddInteractiveWebAssemblyComponents();

// Add MudBlazor services
builder.Services.AddMudServices();

var app = builder.Build();

// Configure the HTTP request pipeline
if (app.Environment.IsDevelopment())
{
    app.UseWebAssemblyDebugging();
}
else
{
    app.UseExceptionHandler("/Error", createScopeForErrors: true);
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseAntiforgery();

app.MapRazorComponents<App>()
    .AddInteractiveServerRenderMode()
    .AddInteractiveWebAssemblyRenderMode()
    .AddAdditionalAssemblies(typeof(InsightLearn.Web.Client._Imports).Assembly);

app.Run();
EOF

# Aggiornare il file App.razor
echo "Updating App.razor with design system integration..." | tee -a "$LOG_FILE"
cat > Components/App.razor << 'EOF'
<!DOCTYPE html>
<html lang="en" data-theme="light">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>InsightLearn.Cloud</title>
    <base href="/" />
    
    <!-- Design System CSS -->
    <link href="css/design-system/design-tokens.css" rel="stylesheet" />
    <link href="css/design-system/components.css" rel="stylesheet" />
    
    <!-- MudBlazor CSS -->
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    
    <!-- Google Fonts for Typography -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;300;400;500;600;700;800;900&family=JetBrains+Mono:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Favicon and PWA -->
    <link rel="icon" type="image/png" href="favicon.png" />
    <link rel="apple-touch-icon" sizes="512x512" href="icon-512.png" />
    <link rel="apple-touch-icon" sizes="192x192" href="icon-192.png" />
    
    <HeadOutlet />
</head>

<body>
    <Routes />

    <div id="blazor-error-ui">
        An unhandled error has occurred.
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <!-- Design System JavaScript -->
    <script src="js/design-system/theme-manager.js"></script>
    
    <!-- MudBlazor JS -->
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="_framework/blazor.web.js"></script>
</body>

</html>
EOF

((COMPONENTS_CREATED++))
verify_build "Design System Foundation"

echo "=== STEP 3.1 COMPLETED ===" | tee -a "$LOG_FILE"
cd ../..
```

### STEP 3.2: Atomic Design Components

**Comando da eseguire dopo successo Step 3.1:**
```bash
#!/bin/bash
# phase3_step2_atomic_components.sh

# [Include template di configurazione]

echo "=== STEP 3.2: Atomic Design Components ===" | tee -a "$LOG_FILE"
cd src/InsightLearn.Web

# Creare Button Component avanzato
echo "Creating advanced Button component..." | tee -a "$LOG_FILE"
cat > Components/DesignSystem/Atoms/ILButton.razor << 'EOF'
@using Microsoft.AspNetCore.Components.Web

<button type="@ButtonType"
        class="@GetButtonClasses()"
        disabled="@IsDisabled"
        @onclick="OnClick"
        @onmouseenter="OnMouseEnter"
        @onmouseleave="OnMouseLeave"
        @onfocus="OnFocus"
        @onblur="OnBlur">
    
    @if (IsLoading)
    {
        <span class="il-loading-spinner"></span>
    }
    
    @if (!string.IsNullOrEmpty(IconLeft))
    {
        <i class="@IconLeft"></i>
    }
    
    <span class="il-btn-text">
        @ChildContent
    </span>
    
    @if (!string.IsNullOrEmpty(IconRight))
    {
        <i class="@IconRight"></i>
    }
</button>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public ButtonVariant Variant { get; set; } = ButtonVariant.Primary;
    [Parameter] public ButtonSize Size { get; set; } = ButtonSize.Medium;
    [Parameter] public string ButtonType { get; set; } = "button";
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public string? IconLeft { get; set; }
    [Parameter] public string? IconRight { get; set; }
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnMouseEnter { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnMouseLeave { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }

    private string GetButtonClasses()
    {
        var classes = new List<string> { "il-btn" };
        
        // Variant classes
        classes.Add(Variant switch
        {
            ButtonVariant.Primary => "il-btn-primary",
            ButtonVariant.Secondary => "il-btn-secondary",
            ButtonVariant.Glass => "il-btn-glass",
            ButtonVariant.Neuro => "il-btn-neuro",
            ButtonVariant.Success => "il-btn-success",
            ButtonVariant.Warning => "il-btn-warning",
            ButtonVariant.Error => "il-btn-error",
            _ => "il-btn-primary"
        });
        
        // Size classes
        classes.Add(Size switch
        {
            ButtonSize.XSmall => "il-btn-xs",
            ButtonSize.Small => "il-btn-sm",
            ButtonSize.Medium => "",
            ButtonSize.Large => "il-btn-lg",
            ButtonSize.XLarge => "il-btn-xl",
            _ => ""
        });
        
        if (IsLoading)
        {
            classes.Add("il-loading");
        }
        
        if (!string.IsNullOrEmpty(CssClass))
        {
            classes.Add(CssClass);
        }
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }

    public enum ButtonVariant
    {
        Primary,
        Secondary,
        Glass,
        Neuro,
        Success,
        Warning,
        Error
    }

    public enum ButtonSize
    {
        XSmall,
        Small,
        Medium,
        Large,
        XLarge
    }
}
EOF

# Creare Input Component avanzato
echo "Creating advanced Input component..." | tee -a "$LOG_FILE"
cat > Components/DesignSystem/Atoms/ILInput.razor << 'EOF'
@using Microsoft.AspNetCore.Components.Forms

<div class="il-input-container @ContainerClass">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="il-input-label" for="@InputId">
            @Label
            @if (IsRequired)
            {
                <span class="il-required">*</span>
            }
        </label>
    }
    
    <div class="il-input-wrapper">
        @if (!string.IsNullOrEmpty(IconLeft))
        {
            <i class="il-input-icon-left @IconLeft"></i>
        }
        
        <input id="@InputId"
               type="@InputType"
               class="@GetInputClasses()"
               placeholder="@Placeholder"
               value="@Value"
               disabled="@IsDisabled"
               readonly="@IsReadOnly"
               @oninput="OnValueChanged"
               @onfocus="OnFocus"
               @onblur="OnBlur" />
        
        @if (!string.IsNullOrEmpty(IconRight))
        {
            <i class="il-input-icon-right @IconRight"></i>
        }
        
        @if (ShowClearButton && !string.IsNullOrEmpty(Value))
        {
            <button type="button" class="il-input-clear" @onclick="ClearValue">
                <i class="fas fa-times"></i>
            </button>
        }
    </div>
    
    @if (!string.IsNullOrEmpty(HelperText))
    {
        <div class="il-input-helper">@HelperText</div>
    }
    
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="il-input-error">@ErrorMessage</div>
    }
</div>

<style>
.il-input-container {
    display: flex;
    flex-direction: column;
    gap: var(--il-space-2);
    width: 100%;
}

.il-input-label {
    font-size: var(--il-text-sm);
    font-weight: var(--il-font-medium);
    color: var(--il-text-secondary);
}

.il-required {
    color: var(--il-error);
}

.il-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
}

.il-input-icon-left,
.il-input-icon-right {
    position: absolute;
    color: var(--il-text-tertiary);
    pointer-events: none;
}

.il-input-icon-left {
    left: var(--il-space-3);
}

.il-input-icon-right {
    right: var(--il-space-3);
}

.il-input-clear {
    position: absolute;
    right: var(--il-space-2);
    background: none;
    border: none;
    color: var(--il-text-tertiary);
    cursor: pointer;
    padding: var(--il-space-1);
    border-radius: var(--il-radius-base);
    transition: all var(--il-duration-200) var(--il-ease-out);
}

.il-input-clear:hover {
    color: var(--il-text-secondary);
    background: var(--il-bg-secondary);
}

.il-input-helper {
    font-size: var(--il-text-xs);
    color: var(--il-text-tertiary);
}

.il-input-error {
    font-size: var(--il-text-xs);
    color: var(--il-error);
    font-weight: var(--il-font-medium);
}

.il-input-glass {
    background: var(--il-glass-bg);
    backdrop-filter: var(--il-backdrop-blur);
    border-color: var(--il-glass-border);
}

.il-input-neuro {
    background: var(--il-bg-secondary);
    border: none;
    box-shadow: var(--il-neuro-inset);
}

.il-input-has-icon-left {
    padding-left: var(--il-space-10);
}

.il-input-has-icon-right {
    padding-right: var(--il-space-10);
}

.il-input-error-state {
    border-color: var(--il-error);
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
}

.il-input-success-state {
    border-color: var(--il-success);
    box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
}
</style>

@code {
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public string InputType { get; set; } = "text";
    [Parameter] public bool IsRequired { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool IsReadOnly { get; set; }
    [Parameter] public string? IconLeft { get; set; }
    [Parameter] public string? IconRight { get; set; }
    [Parameter] public bool ShowClearButton { get; set; }
    [Parameter] public string? HelperText { get; set; }
    [Parameter] public string? ErrorMessage { get; set; }
    [Parameter] public InputVariant Variant { get; set; } = InputVariant.Default;
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public string? ContainerClass { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }

    private string InputId = Guid.NewGuid().ToString("N")[..8];

    private string GetInputClasses()
    {
        var classes = new List<string> { "il-input" };
        
        classes.Add(Variant switch
        {
            InputVariant.Glass => "il-input-glass",
            InputVariant.Neuro => "il-input-neuro",
            _ => ""
        });
        
        if (!string.IsNullOrEmpty(IconLeft))
            classes.Add("il-input-has-icon-left");
            
        if (!string.IsNullOrEmpty(IconRight) || ShowClearButton)
            classes.Add("il-input-has-icon-right");
            
        if (!string.IsNullOrEmpty(ErrorMessage))
            classes.Add("il-input-error-state");
            
        if (!string.IsNullOrEmpty(CssClass))
            classes.Add(CssClass);
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }

    private async Task OnValueChanged(ChangeEventArgs e)
    {
        Value = e.Value?.ToString() ?? "";
        await ValueChanged.InvokeAsync(Value);
    }

    private async Task ClearValue()
    {
        Value = "";
        await ValueChanged.InvokeAsync(Value);
    }

    public enum InputVariant
    {
        Default,
        Glass,
        Neuro
    }
}
EOF

# Creare Card Component avanzato
echo "Creating advanced Card component..." | tee -a "$LOG_FILE"
cat > Components/DesignSystem/Atoms/ILCard.razor << 'EOF'
<div class="@GetCardClasses()" @onclick="OnClick">
    @if (HeaderContent != null)
    {
        <div class="il-card-header">
            @HeaderContent
        </div>
    }
    
    @if (ImageUrl != null)
    {
        <div class="il-card-image">
            <img src="@ImageUrl" alt="@ImageAlt" loading="lazy" />
            @if (ImageOverlayContent != null)
            {
                <div class="il-card-image-overlay">
                    @ImageOverlayContent
                </div>
            }
        </div>
    }
    
    <div class="il-card-body">
        @BodyContent
    </div>
    
    @if (FooterContent != null)
    {
        <div class="il-card-footer">
            @FooterContent
        </div>
    }
    
    @if (IsHoverable)
    {
        <div class="il-card-hover-effect"></div>
    }
</div>

<style>
.il-card-image {
    position: relative;
    overflow: hidden;
}

.il-card-image img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    transition: transform var(--il-duration-300) var(--il-ease-out);
}

.il-card:hover .il-card-image img {
    transform: scale(1.05);
}

.il-card-image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.7) 100%);
    display: flex;
    align-items: flex-end;
    padding: var(--il-space-4);
    color: white;
}

.il-card-hover-effect {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--il-gradient-primary);
    opacity: 0;
    transition: opacity var(--il-duration-300) var(--il-ease-out);
    pointer-events: none;
    border-radius: inherit;
    mix-blend-mode: overlay;
}

.il-card:hover .il-card-hover-effect {
    opacity: 0.1;
}

.il-card-elevated {
    box-shadow: var(--il-shadow-lg);
}

.il-card-elevated:hover {
    box-shadow: var(--il-shadow-2xl);
    transform: translateY(-8px);
}

.il-card-bordered {
    border: 2px solid var(--il-border-primary);
}

.il-card-interactive {
    cursor: pointer;
}

.il-card-interactive:active {
    transform: scale(0.98) translateY(-2px);
}
</style>

@code {
    [Parameter] public RenderFragment? HeaderContent { get; set; }
    [Parameter] public RenderFragment? BodyContent { get; set; }
    [Parameter] public RenderFragment? FooterContent { get; set; }
    [Parameter] public RenderFragment? ImageOverlayContent { get; set; }
    [Parameter] public string? ImageUrl { get; set; }
    [Parameter] public string? ImageAlt { get; set; }
    [Parameter] public CardVariant Variant { get; set; } = CardVariant.Default;
    [Parameter] public bool IsHoverable { get; set; } = true;
    [Parameter] public bool IsElevated { get; set; }
    [Parameter] public bool IsBordered { get; set; }
    [Parameter] public bool IsInteractive { get; set; }
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

    private string GetCardClasses()
    {
        var classes = new List<string> { "il-card" };
        
        classes.Add(Variant switch
        {
            CardVariant.Glass => "il-card-glass",
            CardVariant.Neuro => "il-card-neuro",
            _ => ""
        });
        
        if (IsElevated)
            classes.Add("il-card-elevated");
            
        if (IsBordered)
            classes.Add("il-card-bordered");
            
        if (IsInteractive || OnClick.HasDelegate)
            classes.Add("il-card-interactive");
            
        if (!string.IsNullOrEmpty(CssClass))
            classes.Add(CssClass);
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }

    public enum CardVariant
    {
        Default,
        Glass,
        Neuro
    }
}
EOF

# Creare Avatar Component
echo "Creating Avatar component..." | tee -a "$LOG_FILE"
cat > Components/DesignSystem/Atoms/ILAvatar.razor << 'EOF'
<div class="@GetAvatarClasses()">
    @if (!string.IsNullOrEmpty(ImageUrl))
    {
        <img src="@ImageUrl" alt="@Alt" />
    }
    else if (!string.IsNullOrEmpty(Initials))
    {
        <span class="il-avatar-initials">@Initials</span>
    }
    else if (!string.IsNullOrEmpty(Icon))
    {
        <i class="@Icon"></i>
    }
    
    @if (HasStatusIndicator)
    {
        <div class="il-avatar-status il-avatar-status-@Status.ToString().ToLower()"></div>
    }
    
    @if (HasNotificationBadge)
    {
        <div class="il-avatar-badge">
            @if (NotificationCount > 99)
            {
                <span>99+</span>
            }
            else if (NotificationCount > 0)
            {
                <span>@NotificationCount</span>
            }
        </div>
    }
</div>

<style>
.il-avatar {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--il-radius-full);
    background: var(--il-bg-secondary);
    color: var(--il-text-primary);
    font-weight: var(--il-font-semibold);
    overflow: hidden;
    user-select: none;
    flex-shrink: 0;
}

.il-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.il-avatar-xs {
    width: 24px;
    height: 24px;
    font-size: var(--il-text-xs);
}

.il-avatar-sm {
    width: 32px;
    height: 32px;
    font-size: var(--il-text-sm);
}

.il-avatar-md {
    width: 40px;
    height: 40px;
    font-size: var(--il-text-base);
}

.il-avatar-lg {
    width: 48px;
    height: 48px;
    font-size: var(--il-text-lg);
}

.il-avatar-xl {
    width: 64px;
    height: 64px;
    font-size: var(--il-text-xl);
}

.il-avatar-2xl {
    width: 80px;
    height: 80px;
    font-size: var(--il-text-2xl);
}

.il-avatar-status {
    position: absolute;
    bottom: 0;
    right: 0;
    width: 12px;
    height: 12px;
    border-radius: var(--il-radius-full);
    border: 2px solid var(--il-bg-primary);
}

.il-avatar-status-online {
    background: var(--il-success);
}

.il-avatar-status-offline {
    background: var(--il-gray-400);
}

.il-avatar-status-busy {
    background: var(--il-error);
}

.il-avatar-status-away {
    background: var(--il-warning);
}

.il-avatar-badge {
    position: absolute;
    top: -4px;
    right: -4px;
    min-width: 20px;
    height: 20px;
    background: var(--il-error);
    color: white;
    border-radius: var(--il-radius-full);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: var(--il-text-xs);
    font-weight: var(--il-font-bold);
    border: 2px solid var(--il-bg-primary);
}

.il-avatar-square {
    border-radius: var(--il-radius-lg);
}

.il-avatar-gradient {
    background: var(--il-gradient-primary);
    color: white;
}
</style>

@code {
    [Parameter] public string? ImageUrl { get; set; }
    [Parameter] public string? Alt { get; set; }
    [Parameter] public string? Initials { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public AvatarSize Size { get; set; } = AvatarSize.Medium;
    [Parameter] public bool IsSquare { get; set; }
    [Parameter] public bool IsGradient { get; set; }
    [Parameter] public bool HasStatusIndicator { get; set; }
    [Parameter] public StatusType Status { get; set; } = StatusType.Online;
    [Parameter] public bool HasNotificationBadge { get; set; }
    [Parameter] public int NotificationCount { get; set; }
    [Parameter] public string? CssClass { get; set; }

    private string GetAvatarClasses()
    {
        var classes = new List<string> { "il-avatar" };
        
        classes.Add(Size switch
        {
            AvatarSize.XSmall => "il-avatar-xs",
            AvatarSize.Small => "il-avatar-sm",
            AvatarSize.Medium => "il-avatar-md",
            AvatarSize.Large => "il-avatar-lg",
            AvatarSize.XLarge => "il-avatar-xl",
            AvatarSize.XXLarge => "il-avatar-2xl",
            _ => "il-avatar-md"
        });
        
        if (IsSquare)
            classes.Add("il-avatar-square");
            
        if (IsGradient)
            classes.Add("il-avatar-gradient");
            
        if (!string.IsNullOrEmpty(CssClass))
            classes.Add(CssClass);
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }

    public enum AvatarSize
    {
        XSmall,
        Small,
        Medium,
        Large,
        XLarge,
        XXLarge
    }

    public enum StatusType
    {
        Online,
        Offline,
        Busy,
        Away
    }
}
EOF

((COMPONENTS_CREATED++))
verify_build "Avatar Component"

# Creare Badge Component
echo "Creating Badge component..." | tee -a "$LOG_FILE"
cat > Components/DesignSystem/Atoms/ILBadge.razor << 'EOF'
<span class="@GetBadgeClasses()">
    @if (!string.IsNullOrEmpty(Icon))
    {
        <i class="@Icon"></i>
    }
    
    @ChildContent
    
    @if (HasCloseButton)
    {
        <button type="button" class="il-badge-close" @onclick="OnClose">
            <i class="fas fa-times"></i>
        </button>
    }
</span>

<style>
.il-badge {
    display: inline-flex;
    align-items: center;
    gap: var(--il-space-1);
    padding: var(--il-space-1) var(--il-space-2);
    font-size: var(--il-text-xs);
    font-weight: var(--il-font-medium);
    border-radius: var(--il-radius-base);
    white-space: nowrap;
    line-height: 1;
}

.il-badge-primary {
    background: var(--il-primary-100);
    color: var(--il-primary-800);
}

.il-badge-secondary {
    background: var(--il-gray-100);
    color: var(--il-gray-800);
}

.il-badge-success {
    background: var(--il-success-light);
    color: var(--il-success-dark);
}

.il-badge-warning {
    background: var(--il-warning-light);
    color: var(--il-warning-dark);
}

.il-badge-error {
    background: var(--il-error-light);
    color: var(--il-error-dark);
}

.il-badge-info {
    background: var(--il-info-light);
    color: var(--il-info-dark);
}

.il-badge-outline {
    background: transparent;
    border: 1px solid currentColor;
}

.il-badge-solid-primary {
    background: var(--il-primary-500);
    color: white;
}

.il-badge-solid-success {
    background: var(--il-success);
    color: white;
}

.il-badge-solid-warning {
    background: var(--il-warning);
    color: white;
}

.il-badge-solid-error {
    background: var(--il-error);
    color: white;
}

.il-badge-dot {
    width: 8px;
    height: 8px;
    border-radius: var(--il-radius-full);
    padding: 0;
    min-width: 8px;
}

.il-badge-pill {
    border-radius: var(--il-radius-full);
    padding: var(--il-space-1) var(--il-space-3);
}

.il-badge-close {
    background: none;
    border: none;
    color: currentColor;
    cursor: pointer;
    padding: 0;
    margin-left: var(--il-space-1);
    opacity: 0.7;
    transition: opacity var(--il-duration-200) var(--il-ease-out);
}

.il-badge-close:hover {
    opacity: 1;
}

.il-badge-animate {
    animation: il-badge-pulse 2s infinite;
}

@keyframes il-badge-pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(14, 165, 233, 0.7);
    }
    70% {
        box-shadow: 0 0 0 10px rgba(14, 165, 233, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(14, 165, 233, 0);
    }
}
</style>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public BadgeVariant Variant { get; set; } = BadgeVariant.Primary;
    [Parameter] public BadgeStyle Style { get; set; } = BadgeStyle.Default;
    [Parameter] public string? Icon { get; set; }
    [Parameter] public bool HasCloseButton { get; set; }
    [Parameter] public bool IsAnimated { get; set; }
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private string GetBadgeClasses()
    {
        var classes = new List<string> { "il-badge" };
        
        // Variant and style combination
        if (Style == BadgeStyle.Solid)
        {
            classes.Add(Variant switch
            {
                BadgeVariant.Primary => "il-badge-solid-primary",
                BadgeVariant.Success => "il-badge-solid-success",
                BadgeVariant.Warning => "il-badge-solid-warning",
                BadgeVariant.Error => "il-badge-solid-error",
                _ => "il-badge-solid-primary"
            });
        }
        else if (Style == BadgeStyle.Outline)
        {
            classes.Add("il-badge-outline");
            classes.Add(Variant switch
            {
                BadgeVariant.Primary => "il-badge-primary",
                BadgeVariant.Secondary => "il-badge-secondary",
                BadgeVariant.Success => "il-badge-success",
                BadgeVariant.Warning => "il-badge-warning",
                BadgeVariant.Error => "il-badge-error",
                BadgeVariant.Info => "il-badge-info",
                _ => "il-badge-primary"
            });
        }
        else if (Style == BadgeStyle.Dot)
        {
            classes.Add("il-badge-dot");
            classes.Add(Variant switch
            {
                BadgeVariant.Primary => "il-badge-solid-primary",
                BadgeVariant.Success => "il-badge-solid-success",
                BadgeVariant.Warning => "il-badge-solid-warning",
                BadgeVariant.Error => "il-badge-solid-error",
                _ => "il-badge-solid-primary"
            });
        }
        else if (Style == BadgeStyle.Pill)
        {
            classes.Add("il-badge-pill");
            classes.Add(Variant switch
            {
                BadgeVariant.Primary => "il-badge-primary",
                BadgeVariant.Secondary => "il-badge-secondary",
                BadgeVariant.Success => "il-badge-success",
                BadgeVariant.Warning => "il-badge-warning",
                BadgeVariant.Error => "il-badge-error",
                BadgeVariant.Info => "il-badge-info",
                _ => "il-badge-primary"
            });
        }
        else
        {
            classes.Add(Variant switch
            {
                BadgeVariant.Primary => "il-badge-primary",
                BadgeVariant.Secondary => "il-badge-secondary",
                BadgeVariant.Success => "il-badge-success",
                BadgeVariant.Warning => "il-badge-warning",
                BadgeVariant.Error => "il-badge-error",
                BadgeVariant.Info => "il-badge-info",
                _ => "il-badge-primary"
            });
        }
        
        if (IsAnimated)
            classes.Add("il-badge-animate");
            
        if (!string.IsNullOrEmpty(CssClass))
            classes.Add(CssClass);
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }

    public enum BadgeVariant
    {
        Primary,
        Secondary,
        Success,
        Warning,
        Error,
        Info
    }

    public enum BadgeStyle
    {
        Default,
        Solid,
        Outline,
        Dot,
        Pill
    }
}
EOF

((COMPONENTS_CREATED++))
verify_build "Badge Component"

echo "=== STEP 3.2 COMPLETED ===" | tee -a "$LOG_FILE"
cd ../..
```

### STEP 3.3: Molecule Components

**Comando da eseguire dopo successo Step 3.2:**
```bash
#!/bin/bash
# phase3_step3_molecule_components.sh

# [Include template di configurazione]

echo "=== STEP 3.3: Molecule Components ===" | tee -a "$LOG_FILE"
cd src/InsightLearn.Web

# Creare SearchBar Component avanzato
echo "Creating advanced SearchBar component..." | tee -a "$LOG_FILE"
cat > Components/DesignSystem/Molecules/ILSearchBar.razor << 'EOF'
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JS

<div class="il-searchbar @ContainerClass">
    <div class="il-searchbar-wrapper">
        <div class="il-searchbar-input-container">
            <i class="fas fa-search il-searchbar-icon"></i>
            <input type="text"
                   class="il-searchbar-input"
                   placeholder="@Placeholder"
                   value="@SearchTerm"
                   @oninput="OnSearchInput"
                   @onfocus="OnFocus"
                   @onblur="OnBlur"
                   @onkeydown="OnKeyDown" />
            
            @if (!string.IsNullOrEmpty(SearchTerm))
            {
                <button type="button" class="il-searchbar-clear" @onclick="ClearSearch">
                    <i class="fas fa-times"></i>
                </button>
            }
            
            @if (IsLoading)
            {
                <div class="il-searchbar-loading">
                    <i class="fas fa-spinner fa-spin"></i>
                </div>
            }
        </div>
        
        @if (ShowFilters)
        {
            <div class="il-searchbar-filters">
                <select class="il-searchbar-filter" @onchange="OnCategoryChange">
                    <option value="">All Categories</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Value" selected="@(category.Value == SelectedCategory)">
                            @category.Text
                        </option>
                    }
                </select>
                
                @if (ShowAdvancedFilters)
                {
                    <button type="button" class="il-searchbar-filter-btn @(IsAdvancedOpen ? "active" : "")" 
                            @onclick="ToggleAdvanced">
                        <i class="fas fa-filter"></i>
                        Filters
                    </button>
                }
            </div>
        }
        
        <button type="button" class="il-searchbar-submit" @onclick="OnSearch">
            <i class="fas fa-search"></i>
            <span class="il-searchbar-submit-text">Search</span>
        </button>
    </div>
    
    @if (IsAdvancedOpen && ShowAdvancedFilters)
    {
        <div class="il-searchbar-advanced">
            <div class="il-searchbar-advanced-grid">
                @AdvancedFiltersContent
            </div>
        </div>
    }
    
    @if (ShowSuggestions && Suggestions?.Any() == true)
    {
        <div class="il-searchbar-suggestions">
            @foreach (var suggestion in Suggestions.Take(MaxSuggestions))
            {
                <button type="button" class="il-searchbar-suggestion" 
                        @onclick="() => SelectSuggestion(suggestion)">
                    <i class="fas fa-search il-searchbar-suggestion-icon"></i>
                    <span class="il-searchbar-suggestion-text">@suggestion.Text</span>
                    @if (!string.IsNullOrEmpty(suggestion.Category))
                    {
                        <span class="il-searchbar-suggestion-category">@suggestion.Category</span>
                    }
                </button>
            }
        </div>
    }
</div>

<style>
.il-searchbar {
    position: relative;
    width: 100%;
    max-width: 800px;
}

.il-searchbar-wrapper {
    display: flex;
    align-items: center;
    gap: var(--il-space-2);
    background: var(--il-glass-bg);
    backdrop-filter: var(--il-backdrop-blur);
    border: 1px solid var(--il-glass-border);
    border-radius: var(--il-radius-2xl);
    padding: var(--il-space-2);
    box-shadow: var(--il-shadow-lg);
    transition: all var(--il-duration-300) var(--il-ease-out);
}

.il-searchbar-wrapper:focus-within {
    border-color: var(--il-primary-500);
    box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1), var(--il-shadow-xl);
}

.il-searchbar-input-container {
    flex: 1;
    position: relative;
    display: flex;
    align-items: center;
}

.il-searchbar-icon {
    position: absolute;
    left: var(--il-space-4);
    color: var(--il-text-tertiary);
    z-index: 1;
}

.il-searchbar-input {
    width: 100%;
    padding: var(--il-space-4) var(--il-space-12);
    border: none;
    background: transparent;
    font-size: var(--il-text-base);
    color: var(--il-text-primary);
    outline: none;
}

.il-searchbar-input::placeholder {
    color: var(--il-text-tertiary);
}

.il-searchbar-clear,
.il-searchbar-loading {
    position: absolute;
    right: var(--il-space-4);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
}

.il-searchbar-clear {
    background: none;
    border: none;
    color: var(--il-text-tertiary);
    cursor: pointer;
    border-radius: var(--il-radius-full);
    transition: all var(--il-duration-200) var(--il-ease-out);
}

.il-searchbar-clear:hover {
    color: var(--il-text-secondary);
    background: var(--il-bg-secondary);
}

.il-searchbar-filters {
    display: flex;
    align-items: center;
    gap: var(--il-space-2);
}

.il-searchbar-filter {
    padding: var(--il-space-2) var(--il-space-3);
    border: 1px solid var(--il-border-primary);
    border-radius: var(--il-radius-lg);
    background: var(--il-bg-primary);
    color: var(--il-text-primary);
    font-size: var(--il-text-sm);
}

.il-searchbar-filter-btn {
    display: flex;
    align-items: center;
    gap: var(--il-space-2);
    padding: var(--il-space-2) var(--il-space-3);
    background: var(--il-bg-secondary);
    border: 1px solid var(--il-border-primary);
    border-radius: var(--il-radius-lg);
    color: var(--il-text-secondary);
    cursor: pointer;
    transition: all var(--il-duration-200) var(--il-ease-out);
}

.il-searchbar-filter-btn:hover,
.il-searchbar-filter-btn.active {
    background: var(--il-primary-50);
    color: var(--il-primary-600);
    border-color: var(--il-primary-200);
}

.il-searchbar-submit {
    display: flex;
    align-items: center;
    gap: var(--il-space-2);
    padding: var(--il-space-3) var(--il-space-6);
    background: var(--il-gradient-primary);
    border: none;
    border-radius: var(--il-radius-xl);
    color: white;
    font-weight: var(--il-font-medium);
    cursor: pointer;
    transition: all var(--il-duration-200) var(--il-ease-out);
}

.il-searchbar-submit:hover {
    transform: translateY(-1px);
    box-shadow: var(--il-shadow-lg);
}

.il-searchbar-submit-text {
    display: none;
}

.il-searchbar-advanced {
    margin-top: var(--il-space-4);
    padding: var(--il-space-6);
    background: var(--il-bg-secondary);
    border: 1px solid var(--il-border-primary);
    border-radius: var(--il-radius-xl);
    animation: il-slide-down var(--il-duration-300) var(--il-ease-out);
}

.il-searchbar-advanced-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--il-space-4);
}

.il-searchbar-suggestions {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: var(--il-bg-primary);
    border: 1px solid var(--il-border-primary);
    border-radius: var(--il-radius-xl);
    box-shadow: var(--il-shadow-xl);
    z-index: var(--il-z-popover);
    margin-top: var(--il-space-2);
    overflow: hidden;
    animation: il-fade-in var(--il-duration-200) var(--il-ease-out);
}

.il-searchbar-suggestion {
    display: flex;
    align-items: center;
    gap: var(--il-space-3);
    width: 100%;
    padding: var(--il-space-3) var(--il-space-4);
    background: none;
    border: none;
    text-align: left;
    cursor: pointer;
    transition: background-color var(--il-duration-200) var(--il-ease-out);
    border-bottom: 1px solid var(--il-border-primary);
}

.il-searchbar-suggestion:last-child {
    border-bottom: none;
}

.il-searchbar-suggestion:hover {
    background: var(--il-bg-secondary);
}

.il-searchbar-suggestion-icon {
    color: var(--il-text-tertiary);
    font-size: var(--il-text-sm);
}

.il-searchbar-suggestion-text {
    flex: 1;
    color: var(--il-text-primary);
}

.il-searchbar-suggestion-category {
    padding: var(--il-space-1) var(--il-space-2);
    background: var(--il-bg-tertiary);
    color: var(--il-text-tertiary);
    font-size: var(--il-text-xs);
    border-radius: var(--il-radius-base);
}

@keyframes il-slide-down {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Responsive design */
@media (min-width: 640px) {
    .il-searchbar-submit-text {
        display: inline;
    }
}

@media (max-width: 639px) {
    .il-searchbar-wrapper {
        flex-direction: column;
        gap: var(--il-space-3);
        align-items: stretch;
    }
    
    .il-searchbar-filters {
        order: 2;
    }
    
    .il-searchbar-submit {
        order: 3;
        justify-content: center;
    }
}
</style>

@code {
    [Parameter] public string? SearchTerm { get; set; }
    [Parameter] public EventCallback<string> SearchTermChanged { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Search courses, topics, instructors...";
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public bool ShowFilters { get; set; } = true;
    [Parameter] public bool ShowAdvancedFilters { get; set; } = true;
    [Parameter] public bool ShowSuggestions { get; set; } = true;
    [Parameter] public int MaxSuggestions { get; set; } = 5;
    [Parameter] public List<CategoryOption> Categories { get; set; } = new();
    [Parameter] public string? SelectedCategory { get; set; }
    [Parameter] public EventCallback<string> SelectedCategoryChanged { get; set; }
    [Parameter] public List<SearchSuggestion> Suggestions { get; set; } = new();
    [Parameter] public RenderFragment? AdvancedFiltersContent { get; set; }
    [Parameter] public string? ContainerClass { get; set; }
    [Parameter] public EventCallback<string> OnSearch { get; set; }
    [Parameter] public EventCallback<SearchSuggestion> OnSuggestionSelected { get; set; }

    private bool IsAdvancedOpen = false;
    private bool HasFocus = false;

    protected override void OnInitialized()
    {
        if (!Categories.Any())
        {
            Categories = new List<CategoryOption>
            {
                new("development", "Development"),
                new("business", "Business"),
                new("design", "Design"),
                new("marketing", "Marketing"),
                new("music", "Music"),
                new("health", "Health & Fitness")
            };
        }
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? "";
        await SearchTermChanged.InvokeAsync(SearchTerm);
    }

    private async Task OnFocus()
    {
        HasFocus = true;
        StateHasChanged();
    }

    private async Task OnBlur()
    {
        // Delay to allow suggestion clicks
        await Task.Delay(150);
        HasFocus = false;
        StateHasChanged();
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnSearch.InvokeAsync(SearchTerm ?? "");
        }
        else if (e.Key == "Escape")
        {
            await ClearSearch();
        }
    }

    private async Task ClearSearch()
    {
        SearchTerm = "";
        await SearchTermChanged.InvokeAsync(SearchTerm);
    }

    private async Task OnCategoryChange(ChangeEventArgs e)
    {
        SelectedCategory = e.Value?.ToString();
        await SelectedCategoryChanged.InvokeAsync(SelectedCategory ?? "");
    }

    private void ToggleAdvanced()
    {
        IsAdvancedOpen = !IsAdvancedOpen;
    }

    private async Task SelectSuggestion(SearchSuggestion suggestion)
    {
        SearchTerm = suggestion.Text;
        await SearchTermChanged.InvokeAsync(SearchTerm);
        await OnSuggestionSelected.InvokeAsync(suggestion);
        HasFocus = false;
    }

    public class CategoryOption
    {
        public CategoryOption(string value, string text)
        {
            Value = value;
            Text = text;
        }

        public string Value { get; set; }
        public string Text { get; set; }
    }

    public class SearchSuggestion
    {
        public string Text { get; set; } = "";
        public string? Category { get; set; }
        public string? Url { get; set; }
        public object? Data { get; set; }
    }
}
EOF

((COMPONENTS_CREATED++))
verify_build "SearchBar Component"

# Creare CourseCard Component specifico per la piattaforma
echo "Creating CourseCard component..." | tee -a "$LOG_FILE"
cat > Components/DesignSystem/Molecules/ILCourseCard.razor << 'EOF'
<div class="il-course-card @(IsHovered ? "hovered" : "")" 
     @onmouseenter="OnMouseEnter" 
     @onmouseleave="OnMouseLeave"
     @onclick="OnCardClick">
    
    <div class="il-course-card-image-container">
        <img src="@Course.ThumbnailUrl" alt="@Course.Title" class="il-course-card-image" loading="lazy" />
        
        @if (!string.IsNullOrEmpty(Course.VideoPreviewUrl))
        {
            <div class="il-course-card-video-overlay @(IsHovered ? "visible" : "")">
                <button class="il-course-card-play-btn" @onclick:stopPropagation="true" @onclick="PlayPreview">
                    <i class="fas fa-play"></i>
                </button>
            </div>
        }
        
        <div class="il-course-card-badges">
            @if (Course.IsBestseller)
            {
                <ILBadge Variant="BadgeVariant.Warning" Style="BadgeStyle.Solid">Bestseller</ILBadge>
            }
            @if (Course.IsNew)
            {
                <ILBadge Variant="BadgeVariant.Success" Style="BadgeStyle.Solid">New</ILBadge>
            }
            @if (Course.DiscountPercentage > 0)
            {
                <ILBadge Variant="BadgeVariant.Error" Style="BadgeStyle.Solid">@($"{Course.DiscountPercentage}% OFF")</ILBadge>
            }
        </div>
        
        <div class="il-course-card-duration">
            <i class="fas fa-clock"></i>
            @TimeSpan.FromMinutes(Course.DurationMinutes).ToString(@"h\h\ m\m")
        </div>
    </div>
    
    <div class="il-course-card-content">
        <div class="il-course-card-header">
            <h3 class="il-course-card-title">@Course.Title</h3>
            <p class="il-course-card-subtitle">@Course.Subtitle</p>
        </div>
        
        <div class="il-course-card-instructor">
            <ILAvatar ImageUrl="@Course.Instructor.AvatarUrl" 
                      Initials="@GetInstructorInitials()" 
                      Size="AvatarSize.Small" />
            <span class="il-course-card-instructor-name">@Course.Instructor.Name</span>
            @if (Course.Instructor.IsVerified)
            {
                <i class="fas fa-check-circle il-course-card-verified" title="Verified Instructor"></i>
            }
        </div>
        
        <div class="il-course-card-stats">
            <div class="il-course-card-rating">
                <div class="il-course-card-stars">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <i class="fas fa-star @(i <= Course.Rating ? "filled" : "empty")"></i>
                    }
                </div>
                <span class="il-course-card-rating-text">@Course.Rating.ToString("F1")</span>
                <span class="il-course-card-rating-count">(@Course.ReviewCount.ToString("N0"))</span>
            </div>
            
            <div class="il-course-card-enrollment">
                <i class="fas fa-users"></i>
                <span>@FormatEnrollmentCount(Course.EnrollmentCount) students</span>
            </div>
        </div>
        
        <div class="il-course-card-topics">
            @foreach (var topic in Course.Topics.Take(3))
            {
                <ILBadge Variant="BadgeVariant.Secondary" Style="BadgeStyle.Pill">@topic</ILBadge>
            }
            @if (Course.Topics.Count > 3)
            {
                <span class="il-course-card-topic-more">+@(Course.Topics.Count - 3) more</span>
            }
        </div>
        
        <div class="il-course-card-footer">
            <div class="il-course-card-pricing">
                @if (Course.DiscountPrice.HasValue)
                {
                    <span class="il-course-card-price-original">@Course.OriginalPrice.ToString("C")</span>
                    <span class="il-course-card-price-current">@Course.DiscountPrice.Value.ToString("C")</span>
                }
                else
                {
                    <span class="il-course-card-price-current">@Course.OriginalPrice.ToString("C")</span>
                }
                
                @if (Course.IsFree)
                {
                    <span class="il-course-card-price-free">FREE</span>
                }
            </div>
            
            <div class="il-course-card-actions">
                <ILButton Variant="ButtonVariant.Secondary" Size="ButtonSize.Small" 
                          OnClick="AddToWishlist" CssClass="il-course-card-wishlist">
                    <i class="@(IsInWishlist ? "fas fa-heart" : "far fa-heart")"></i>
                </ILButton>
                
                <ILButton Variant="ButtonVariant.Primary" Size="ButtonSize.Small"
                          OnClick="AddToCart" IsLoading="IsAddingToCart">
                    @if (IsInCart)
                    {
                        <span>In Cart</span>
                    }
                    else
                    {
                        <span>Add to Cart</span>
                    }
                </ILButton>
            </div>
        </div>
        
        @if (ShowProgress && EnrollmentProgress.HasValue)
        {
            <div class="il-course-card-progress">
                <div class="il-course-card-progress-bar">
                    <div class="il-course-card-progress-fill" 
                         style="width: @(EnrollmentProgress.Value)%"></div>
                </div>
                <span class="il-course-card-progress-text">@(EnrollmentProgress.Value)% Complete</span>
            </div>
        }
    </div>
</div>

<style>
.il-course-card {
    background: var(--il-bg-primary);
    border-radius: var(--il-radius-2xl);
    box-shadow: var(--il-shadow-sm);
    overflow: hidden;
    transition: all var(--il-duration-300) var(--il-ease-out);
    cursor: pointer;
    position: relative;
}

.il-course-card:hover,
.il-course-card.hovered {
    transform: translateY(-8px);
    box-shadow: var(--il-shadow-2xl);
}

.il-course-card-image-container {
    position: relative;
    aspect-ratio: 16/9;
    overflow: hidden;
}

.il-course-card-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--il-duration-500) var(--il-ease-out);
}

.il-course-card:hover .il-course-card-image {
    transform: scale(1.05);
}

.il-course-card-video-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity var(--il-duration-300) var(--il-ease-out);
}

.il-course-card-video-overlay.visible {
    opacity: 1;
}

.il-course-card-play-btn {
    width: 60px;
    height: 60px;
    border-radius: var(--il-radius-full);
    background: var(--il-primary-500);
    color: white;
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: var(--il-text-xl);
    cursor: pointer;
    transition: all var(--il-duration-200) var(--il-ease-out);
}

.il-course-card-play-btn:hover {
    transform: scale(1.1);
    background: var(--il-primary-600);
}

.il-course-card-badges {
    position: absolute;
    top: var(--il-space-3);
    left: var(--il-space-3);
    display: flex;
    flex-direction: column;
    gap: var(--il-space-2);
}

.il-course-card-duration {
    position: absolute;
    bottom: var(--il-space-3);
    right: var(--il-space-3);
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: var(--il-space-1) var(--il-space-2);
    border-radius: var(--il-radius-base);
    font-size: var(--il-text-xs);
    display: flex;
    align-items: center;
    gap: var(--il-space-1);
}

.il-course-card-content {
    padding: var(--il-space-6);
    display: flex;
    flex-direction: column;
    gap: var(--il-space-4);
}

.il-course-card-title {
    font-size: var(--il-text-lg);
    font-weight: var(--il-font-bold);
    color: var(--il-text-primary);
    line-height: var(--il-leading-tight);
    margin: 0;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.il-course-card-subtitle {
    font-size: var(--il-text-sm);
    color: var(--il-text-secondary);
    line-height: var(--il-leading-relaxed);
    margin: 0;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.il-course-card-instructor {
    display: flex;
    align-items: center;
    gap: var(--il-space-2);
}

.il-course-card-instructor-name {
    font-size: var(--il-text-sm);
    color: var(--il-text-secondary);
    font-weight: var(--il-font-medium);
}

.il-course-card-verified {
    color: var(--il-primary-500);
    font-size: var(--il-text-sm);
}

.il-course-card-stats {
    display: flex;
    flex-direction: column;
    gap: var(--il-space-2);
}

.il-course-card-rating {
    display: flex;
    align-items: center;
    gap: var(--il-space-2);
}

.il-course-card-stars {
    display: flex;
    gap: 1px;
}

.il-course-card-stars .fa-star.filled {
    color: var(--il-warning);
}

.il-course-card-stars .fa-star.empty {
    color: var(--il-gray-300);
}

.il-course-card-rating-text {
    font-weight: var(--il-font-bold);
    color: var(--il-text-primary);
    font-size: var(--il-text-sm);
}

.il-course-card-rating-count {
    color: var(--il-text-tertiary);
    font-size: var(--il-text-xs);
}

.il-course-card-enrollment {
    display: flex;
    align-items: center;
    gap: var(--il-space-2);
    color: var(--il-text-tertiary);
    font-size: var(--il-text-xs);
}

.il-course-card-topics {
    display: flex;
    flex-wrap: wrap;
    gap: var(--il-space-2);
}

.il-course-card-topic-more {
    color: var(--il-text-tertiary);
    font-size: var(--il-text-xs);
    align-self: center;
}

.il-course-card-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: var(--il-space-4);
    border-top: 1px solid var(--il-border-primary);
}

.il-course-card-pricing {
    display: flex;
    align-items: center;
    gap: var(--il-space-2);
}

.il-course-card-price-original {
    color: var(--il-text-tertiary);
    text-decoration: line-through;
    font-size: var(--il-text-sm);
}

.il-course-card-price-current {
    color: var(--il-text-primary);
    font-weight: var(--il-font-bold);
    font-size: var(--il-text-lg);
}

.il-course-card-price-free {
    color: var(--il-success);
    font-weight: var(--il-font-bold);
    font-size: var(--il-text-lg);
}

.il-course-card-actions {
    display: flex;
    align-items: center;
    gap: var(--il-space-2);
}

.il-course-card-wishlist {
    aspect-ratio: 1;
    padding: var(--il-space-2) !important;
}

.il-course-card-progress {
    margin-top: var(--il-space-4);
    padding-top: var(--il-space-4);
    border-top: 1px solid var(--il-border-primary);
}

.il-course-card-progress-bar {
    width: 100%;
    height: 6px;
    background: var(--il-bg-tertiary);
    border-radius: var(--il-radius-full);
    overflow: hidden;
    margin-bottom: var(--il-space-2);
}

.il-course-card-progress-fill {
    height: 100%;
    background: var(--il-gradient-primary);
    border-radius: var(--il-radius-full);
    transition: width var(--il-duration-500) var(--il-ease-out);
}

.il-course-card-progress-text {
    font-size: var(--il-text-xs);
    color: var(--il-text-tertiary);
    font-weight: var(--il-font-medium);
}

/* Mobile optimizations */
@media (max-width: 640px) {
    .il-course-card-content {
        padding: var(--il-space-4);
        gap: var(--il-space-3);
    }
    
    .il-course-card-footer {
        flex-direction: column;
        gap: var(--il-space-3);
        align-items: stretch;
    }
    
    .il-course-card-actions {
        justify-content: center;
    }
}
</style>

@code {
    [Parameter] public CourseModel Course { get; set; } = new();
    [Parameter] public bool ShowProgress { get; set; }
    [Parameter] public int? EnrollmentProgress { get; set; }
    [Parameter] public bool IsInWishlist { get; set; }
    [Parameter] public bool IsInCart { get; set; }
    [Parameter] public bool IsAddingToCart { get; set; }
    [Parameter] public EventCallback<CourseModel> OnCourseClick { get; set; }
    [Parameter] public EventCallback<CourseModel> OnAddToCart { get; set; }
    [Parameter] public EventCallback<CourseModel> OnAddToWishlist { get; set; }
    [Parameter] public EventCallback<CourseModel> OnPlayPreview { get; set; }

    private bool IsHovered = false;

    private void OnMouseEnter() => IsHovered = true;
    private void OnMouseLeave() => IsHovered = false;

    private async Task OnCardClick()
    {
        await OnCourseClick.InvokeAsync(Course);
    }

    private async Task AddToCart()
    {
        await OnAddToCart.InvokeAsync(Course);
    }

    private async Task AddToWishlist()
    {
        await OnAddToWishlist.InvokeAsync(Course);
    }

    private async Task PlayPreview()
    {
        await OnPlayPreview.InvokeAsync(Course);
    }

    private string GetInstructorInitials()
    {
        if (string.IsNullOrEmpty(Course.Instructor?.Name))
            return "";
            
        var parts = Course.Instructor.Name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        
        return parts.Length > 0 ? parts[0][0].ToString().ToUpper() : "";
    }

    private string FormatEnrollmentCount(int count)
    {
        if (count >= 1000000)
            return $"{count / 1000000:F1}M";
        if (count >= 1000)
            return $"{count / 1000:F0}K";
        return count.ToString("N0");
    }

    public class CourseModel
    {
        public string Id { get; set; } = "";
        public string Title { get; set; } = "";
        public string Subtitle { get; set; } = "";
        public string ThumbnailUrl { get; set; } = "";
        public string? VideoPreviewUrl { get; set; }
        public InstructorModel Instructor { get; set; } = new();
        public decimal OriginalPrice { get; set; }
        public decimal? DiscountPrice { get; set; }
        public int DiscountPercentage => DiscountPrice.HasValue 
            ? (int)Math.Round((1 - DiscountPrice.Value / OriginalPrice) * 100) 
            : 0;
        public bool IsFree => OriginalPrice == 0;
        public double Rating { get; set; }
        public int ReviewCount { get; set; }
        public int EnrollmentCount { get; set; }
        public int DurationMinutes { get; set; }
        public bool IsBestseller { get; set; }
        public bool IsNew { get; set; }
        public List<string> Topics { get; set; } = new();
    }

    public class InstructorModel
    {
        public string Name { get; set; } = "";
        public string? AvatarUrl { get; set; }
        public bool IsVerified { get; set; }
    }
}
EOF

((COMPONENTS_CREATED++))
verify_build "CourseCard Component"

echo "=== STEP 3.3 COMPLETED ===" | tee -a "$LOG_FILE"
cd ../..
```

### STEP 3.4: Navigation e Layout Components

**Comando da eseguire dopo successo Step 3.3:**