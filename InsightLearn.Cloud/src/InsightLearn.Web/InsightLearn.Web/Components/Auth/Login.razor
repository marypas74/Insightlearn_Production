@page "/login"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Login - InsightLearn.Cloud</PageTitle>

<div class="auth-container">
    <div class="auth-card">
        <div class="auth-header">
            <h1>Welcome Back</h1>
            <p>Sign in to your InsightLearn.Cloud account</p>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleSubmit" class="auth-form">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-error">
                    <i class="fas fa-exclamation-triangle"></i>
                    @errorMessage
                </div>
            }

            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText id="email" @bind-Value="loginModel.Email" class="form-input" placeholder="Enter your email" />
                <ValidationMessage For="@(() => loginModel.Email)" class="validation-error" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-input" placeholder="Enter your password" />
                <ValidationMessage For="@(() => loginModel.Password)" class="validation-error" />
            </div>

            <div class="form-group-checkbox">
                <InputCheckbox id="remember" @bind-Value="loginModel.RememberMe" class="form-checkbox" />
                <label for="remember">Remember me</label>
            </div>

            <button type="submit" class="btn btn-primary btn-full" disabled="@isLoading">
                @if (isLoading)
                {
                    <i class="fas fa-spinner fa-spin"></i>
                    <span>Signing in...</span>
                }
                else
                {
                    <span>Sign In</span>
                }
            </button>
        </EditForm>

        <div class="auth-divider">
            <span>or continue with</span>
        </div>

        <div class="oauth-buttons">
            <button type="button" class="btn btn-oauth btn-google" @onclick="() => LoginWithOAuth(&quot;google&quot;)" disabled="@isLoading">
                <i class="fab fa-google"></i>
                <span>Google</span>
            </button>
            <button type="button" class="btn btn-oauth btn-github" @onclick="() => LoginWithOAuth(&quot;github&quot;)" disabled="@isLoading">
                <i class="fab fa-github"></i>
                <span>GitHub</span>
            </button>
        </div>

        <div class="auth-links">
            <a href="/forgot-password">Forgot your password?</a>
            <p>Don't have an account? <a href="/register">Sign up here</a></p>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check if user is already authenticated
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "accessToken");
            if (!string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/dashboard");
            }
        }
    }

    private async Task HandleSubmit()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var request = new
            {
                email = loginModel.Email,
                password = loginModel.Password,
                rememberMe = loginModel.RememberMe
            };

            var response = await Http.PostAsJsonAsync("/api/auth/login", request);

            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();

                if (authResponse != null)
                {
                    // Store tokens
                    await JS.InvokeVoidAsync("localStorage.setItem", "accessToken", authResponse.AccessToken);
                    await JS.InvokeVoidAsync("localStorage.setItem", "refreshToken", authResponse.RefreshToken);
                    await JS.InvokeVoidAsync("localStorage.setItem", "user", System.Text.Json.JsonSerializer.Serialize(authResponse.User));

                    // Set authorization header
                    Http.DefaultRequestHeaders.Authorization =
                        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authResponse.AccessToken);

                    // Navigate to dashboard
                    Navigation.NavigateTo("/dashboard");
                }
            }
            else
            {
                var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                errorMessage = errorResponse?.Error ?? "Login failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoginWithOAuth(string provider)
    {
        try
        {
            // Redirect to OAuth provider
            var redirectUri = $"{Navigation.BaseUri}auth/callback/{provider}";
            var authUrl = provider.ToLower() switch
            {
                "google" => $"https://accounts.google.com/oauth/authorize?client_id=YOUR_GOOGLE_CLIENT_ID&redirect_uri={Uri.EscapeDataString(redirectUri)}&response_type=code&scope=openid%20profile%20email",
                "github" => $"https://github.com/login/oauth/authorize?client_id=YOUR_GITHUB_CLIENT_ID&redirect_uri={Uri.EscapeDataString(redirectUri)}&scope=user:email",
                _ => throw new NotSupportedException($"OAuth provider '{provider}' is not supported")
            };

            Navigation.NavigateTo(authUrl, true);
        }
        catch (Exception ex)
        {
            errorMessage = $"OAuth login failed: {ex.Message}";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; } = false;
    }

    public class AuthResponse
    {
        public string AccessToken { get; set; } = string.Empty;
        public string RefreshToken { get; set; } = string.Empty;
        public DateTime ExpiresAt { get; set; }
        public UserDto User { get; set; } = new();
    }

    public class UserDto
    {
        public int Id { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public bool EmailVerified { get; set; }
        public List<string> Roles { get; set; } = new();
        public List<string> Permissions { get; set; } = new();
    }

    public class ErrorResponse
    {
        public string Error { get; set; } = string.Empty;
    }
}

<style>
    .auth-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: calc(100vh - 100px);
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .auth-card {
        background: white;
        border-radius: 16px;
        padding: 40px;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        width: 100%;
        max-width: 400px;
    }

    .auth-header {
        text-align: center;
        margin-bottom: 32px;
    }

    .auth-header h1 {
        font-size: 2rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 8px;
    }

    .auth-header p {
        color: #6b7280;
        font-size: 0.875rem;
    }

    .auth-form {
        margin-bottom: 24px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        font-weight: 500;
        color: #374151;
        margin-bottom: 6px;
        font-size: 0.875rem;
    }

    .form-input {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 0.875rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    .form-input:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .form-group-checkbox {
        display: flex;
        align-items: center;
        margin-bottom: 24px;
    }

    .form-checkbox {
        margin-right: 8px;
    }

    .form-group-checkbox label {
        margin-bottom: 0;
        font-size: 0.875rem;
        color: #374151;
        cursor: pointer;
    }

    .btn {
        padding: 12px 20px;
        border-radius: 8px;
        font-weight: 500;
        font-size: 0.875rem;
        transition: all 0.15s ease-in-out;
        cursor: pointer;
        border: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        box-shadow: 0 4px 14px 0 rgba(102, 126, 234, 0.39);
        transform: translateY(-1px);
    }

    .btn-full {
        width: 100%;
    }

    .auth-divider {
        text-align: center;
        margin: 24px 0;
        position: relative;
    }

    .auth-divider::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 1px;
        background: #e5e7eb;
    }

    .auth-divider span {
        background: white;
        padding: 0 16px;
        color: #6b7280;
        font-size: 0.875rem;
    }

    .oauth-buttons {
        display: flex;
        gap: 12px;
        margin-bottom: 24px;
    }

    .btn-oauth {
        flex: 1;
        background: #f9fafb;
        color: #374151;
        border: 2px solid #e5e7eb;
    }

    .btn-oauth:hover:not(:disabled) {
        background: #f3f4f6;
        border-color: #d1d5db;
    }

    .btn-google:hover:not(:disabled) {
        border-color: #ea4335;
        color: #ea4335;
    }

    .btn-github:hover:not(:disabled) {
        border-color: #333;
        color: #333;
    }

    .auth-links {
        text-align: center;
    }

    .auth-links a {
        color: #667eea;
        text-decoration: none;
        font-size: 0.875rem;
    }

    .auth-links a:hover {
        text-decoration: underline;
    }

    .auth-links p {
        margin-top: 16px;
        color: #6b7280;
        font-size: 0.875rem;
    }

    .alert {
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.875rem;
    }

    .alert-error {
        background: #fef2f2;
        color: #dc2626;
        border: 1px solid #fecaca;
    }

    .validation-error {
        color: #dc2626;
        font-size: 0.75rem;
        margin-top: 4px;
    }
</style>