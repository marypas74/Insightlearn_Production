apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: insightlearn-monitoring
  labels:
    app: grafana
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true

    [grafana_net]
    url = https://grafana.net

    [log]
    mode = console
    level = info

    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning

    [server]
    protocol = http
    http_port = 3000
    domain = grafana.insightlearn-monitoring.svc.cluster.local
    enforce_domain = false
    root_url = http://grafana.insightlearn-monitoring.svc.cluster.local:3000/
    serve_from_sub_path = false

    [database]
    type = sqlite3
    path = grafana.db

    [session]
    provider = file
    provider_config = sessions

    [security]
    admin_user = admin
    admin_password = InsightLearn2024!
    secret_key = SW2YcwTIb9zpOOhoPsMm
    disable_gravatar = false

    [snapshots]
    external_enabled = true
    external_snapshot_url = https://snapshots-origin.raintank.io
    external_snapshot_name = Publish to snapshot.raintank.io

    [users]
    allow_sign_up = false
    allow_org_create = false
    auto_assign_org = true
    auto_assign_org_role = Viewer
    default_theme = dark

    [auth.anonymous]
    enabled = false

    [auth.basic]
    enabled = true

    [smtp]
    enabled = false

  provisioning-datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus.insightlearn-monitoring.svc.cluster.local:9090
      isDefault: true
      version: 1
      editable: true
      jsonData:
        timeInterval: '15s'
        httpMethod: POST
        queryTimeout: '300s'
        scrapeInterval: '15s'
        tlsSkipVerify: true

  provisioning-dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'InsightLearn Dashboards'
      orgId: 1
      folder: 'InsightLearn'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 30
      allowUiUpdates: true
      options:
        path: /etc/grafana/dashboards

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: insightlearn-monitoring
  labels:
    app: grafana
data:
  kubernetes-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Kubernetes Overview",
        "tags": ["kubernetes"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Cluster CPU Usage",
            "type": "stat",
            "targets": [
              {
                "expr": "100 - (avg(irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0},
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 70},
                    {"color": "red", "value": 90}
                  ]
                }
              }
            }
          },
          {
            "id": 2,
            "title": "Cluster Memory Usage",
            "type": "stat",
            "targets": [
              {
                "expr": "(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0},
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 70},
                    {"color": "red", "value": 90}
                  ]
                }
              }
            }
          },
          {
            "id": 3,
            "title": "Pod Count",
            "type": "stat",
            "targets": [
              {
                "expr": "count(kube_pod_info)",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 12, "y": 0}
          },
          {
            "id": 4,
            "title": "Node Count",
            "type": "stat",
            "targets": [
              {
                "expr": "count(kube_node_info)",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "30s"
      }
    }

  application-metrics.json: |
    {
      "dashboard": {
        "id": null,
        "title": "InsightLearn Application Metrics",
        "tags": ["application", "insightlearn"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "API Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"insightlearn-api\"}[5m])",
                "legendFormat": "{{method}} {{status}}",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0},
            "yAxes": [
              {"unit": "reqps", "min": 0},
              {"unit": "short"}
            ]
          },
          {
            "id": 2,
            "title": "API Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.50, rate(http_request_duration_seconds_bucket{job=\"insightlearn-api\"}[5m]))",
                "legendFormat": "50th percentile",
                "refId": "A"
              },
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=\"insightlearn-api\"}[5m]))",
                "legendFormat": "95th percentile",
                "refId": "B"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0},
            "yAxes": [
              {"unit": "s", "min": 0},
              {"unit": "short"}
            ]
          },
          {
            "id": 3,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"insightlearn-api\",status=~\"5..\"}[5m]) / rate(http_requests_total{job=\"insightlearn-api\"}[5m]) * 100",
                "legendFormat": "Error Rate %",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8},
            "yAxes": [
              {"unit": "percent", "min": 0},
              {"unit": "short"}
            ]
          },
          {
            "id": 4,
            "title": "Active Connections",
            "type": "graph",
            "targets": [
              {
                "expr": "http_requests_currently_active{job=\"insightlearn-api\"}",
                "legendFormat": "Active Connections",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "30s"
      }
    }

  database-performance.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Database Performance",
        "tags": ["database", "postgresql", "mongodb", "redis"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Database Connections",
            "type": "graph",
            "targets": [
              {
                "expr": "pg_stat_database_numbackends{job=\"postgresql\"}",
                "legendFormat": "PostgreSQL - {{datname}}",
                "refId": "A"
              },
              {
                "expr": "mongodb_connections{job=\"mongodb\"}",
                "legendFormat": "MongoDB - {{type}}",
                "refId": "B"
              },
              {
                "expr": "redis_connected_clients{job=\"redis\"}",
                "legendFormat": "Redis Clients",
                "refId": "C"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Query Performance",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(pg_stat_database_tup_fetched{job=\"postgresql\"}[5m])",
                "legendFormat": "PostgreSQL Fetches/sec",
                "refId": "A"
              },
              {
                "expr": "rate(mongodb_op_counters_total{job=\"mongodb\"}[5m])",
                "legendFormat": "MongoDB Ops/sec - {{type}}",
                "refId": "B"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "30s"
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: insightlearn-monitoring
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: monitoring-sa
      securityContext:
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        ports:
        - containerPort: 3000
          name: grafana
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: admin
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: InsightLearn2024!
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel"
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-config
          mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
          subPath: provisioning-datasources.yaml
        - name: grafana-config
          mountPath: /etc/grafana/provisioning/dashboards/dashboards.yaml
          subPath: provisioning-dashboards.yaml
        - name: grafana-dashboards
          mountPath: /etc/grafana/dashboards
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: '256Mi'
            cpu: '100m'
          limits:
            memory: '512Mi'
            cpu: '300m'
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 5
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: insightlearn-monitoring
  labels:
    app: grafana
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: insightlearn-monitoring
  labels:
    app: grafana
    component: monitoring
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
spec:
  ports:
  - name: grafana
    port: 3000
    targetPort: 3000
    protocol: TCP
  selector:
    app: grafana
  type: ClusterIP