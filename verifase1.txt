# Prompt Verifica Completa Fase 1 - Claude Code

## üéØ Obiettivo
Eseguire una verifica completa, dettagliata e sistematica della Fase 1 per garantire che l'infrastruttura base di InsightLearn.Cloud sia perfettamente configurata senza errori o mancanze.

## üìã Sistema di Verifica Multi-Level

### LIVELLO 1: Verifica Struttura Base
### LIVELLO 2: Verifica Progetti e Configurazioni
### LIVELLO 3: Verifica Dipendenze e Build
### LIVELLO 4: Verifica Compatibilit√† e Performance
### LIVELLO 5: Verifica Finale e Report

---

## üîç LIVELLO 1: Verifica Struttura Base

```bash
#!/bin/bash
# verification_level1_structure.sh

set -e
set -u

# Setup logging
LOG_FILE="logs/verification_level1_$(date +%Y%m%d_%H%M%S).log"
mkdir -p logs
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE")

echo "========================================" | tee -a "$LOG_FILE"
echo "LIVELLO 1: VERIFICA STRUTTURA BASE" | tee -a "$LOG_FILE"
echo "Data: $(date)" | tee -a "$LOG_FILE"
echo "========================================" | tee -a "$LOG_FILE"

# Timeout function
timeout_cmd() {
    timeout 600 "$@"
    local exit_code=$?
    if [ $exit_code -eq 124 ]; then
        echo "‚ùå ERROR: Command timed out after 10 minutes" | tee -a "$LOG_FILE"
        return 1
    fi
    return $exit_code
}

# Verification counter
ERRORS=0
WARNINGS=0

# Function to check directory exists
check_directory() {
    local dir="$1"
    local description="$2"
    
    if [ -d "$dir" ]; then
        echo "‚úÖ PASS: $description exists at $dir" | tee -a "$LOG_FILE"
    else
        echo "‚ùå FAIL: $description missing at $dir" | tee -a "$LOG_FILE"
        ((ERRORS++))
    fi
}

# Function to check file exists
check_file() {
    local file="$1"
    local description="$2"
    
    if [ -f "$file" ]; then
        echo "‚úÖ PASS: $description exists at $file" | tee -a "$LOG_FILE"
    else
        echo "‚ùå FAIL: $description missing at $file" | tee -a "$LOG_FILE"
        ((ERRORS++))
    fi
}

# Change to project directory
if [ -d "InsightLearn.Cloud" ]; then
    cd InsightLearn.Cloud
    echo "‚úÖ PASS: Main project directory exists" | tee -a "$LOG_FILE"
else
    echo "‚ùå CRITICAL FAIL: Main project directory 'InsightLearn.Cloud' not found" | tee -a "$LOG_FILE"
    echo "Current directory: $(pwd)" | tee -a "$LOG_FILE"
    echo "Available directories:" | tee -a "$LOG_FILE"
    ls -la | tee -a "$LOG_FILE"
    exit 1
fi

echo "\n=== VERIFICA STRUTTURA PRINCIPALE ===" | tee -a "$LOG_FILE"

# Check main solution file
check_file "InsightLearn.Cloud.sln" "Solution file"

# Check source directories
echo "\n--- Verifica Directory Source ---" | tee -a "$LOG_FILE"
check_directory "src" "Source root directory"
check_directory "src/InsightLearn.Web" "Blazor Web project directory"
check_directory "src/InsightLearn.Api" "API project directory" 
check_directory "src/InsightLearn.Core" "Core project directory"
check_directory "src/InsightLearn.Infrastructure" "Infrastructure project directory"
check_directory "src/InsightLearn.AI" "AI project directory"

# Check infrastructure directories
echo "\n--- Verifica Directory Infrastruttura ---" | tee -a "$LOG_FILE"
check_directory "kubernetes" "Kubernetes root directory"
check_directory "kubernetes/configmaps" "Kubernetes ConfigMaps directory"
check_directory "kubernetes/secrets" "Kubernetes Secrets directory"
check_directory "kubernetes/deployments" "Kubernetes Deployments directory"
check_directory "kubernetes/services" "Kubernetes Services directory"
check_directory "docker" "Docker directory"
check_directory "scripts" "Scripts directory"
check_directory "docs" "Documentation directory"

# Check logs directory (should be created by previous steps)
check_directory "logs" "Logs directory"

echo "\n=== VERIFICA FILE DI PROGETTO ===" | tee -a "$LOG_FILE"

# Check project files exist
check_file "src/InsightLearn.Web/InsightLearn.Web.csproj" "Blazor Web project file"
check_file "src/InsightLearn.Api/InsightLearn.Api.csproj" "API project file"
check_file "src/InsightLearn.Core/InsightLearn.Core.csproj" "Core project file"  
check_file "src/InsightLearn.Infrastructure/InsightLearn.Infrastructure.csproj" "Infrastructure project file"
check_file "src/InsightLearn.AI/InsightLearn.AI.csproj" "AI project file"

echo "\n=== RIEPILOGO LIVELLO 1 ===" | tee -a "$LOG_FILE"
echo "Errori trovati: $ERRORS" | tee -a "$LOG_FILE"
echo "Warning: $WARNINGS" | tee -a "$LOG_FILE"

if [ $ERRORS -eq 0 ]; then
    echo "‚úÖ LIVELLO 1 SUPERATO: Struttura base verificata correttamente" | tee -a "$LOG_FILE"
    exit 0
else
    echo "‚ùå LIVELLO 1 FALLITO: $ERRORS errori nella struttura base" | tee -a "$LOG_FILE"
    exit 1
fi
```

---

## üîß LIVELLO 2: Verifica Progetti e Configurazioni

```bash
#!/bin/bash
# verification_level2_projects.sh

set -e
set -u

# Setup logging
LOG_FILE="logs/verification_level2_$(date +%Y%m%d_%H%M%S).log"
mkdir -p logs
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE")

echo "========================================" | tee -a "$LOG_FILE"
echo "LIVELLO 2: VERIFICA PROGETTI E CONFIGURAZIONI" | tee -a "$LOG_FILE"
echo "Data: $(date)" | tee -a "$LOG_FILE"
echo "========================================" | tee -a "$LOG_FILE"

# Timeout function
timeout_cmd() {
    timeout 600 "$@"
    local exit_code=$?
    if [ $exit_code -eq 124 ]; then
        echo "‚ùå ERROR: Command timed out after 10 minutes" | tee -a "$LOG_FILE"
        return 1
    fi
    return $exit_code
}

ERRORS=0
WARNINGS=0

cd InsightLearn.Cloud

echo "\n=== VERIFICA SOLUTION CONFIGURATION ===" | tee -a "$LOG_FILE"

# Check solution lists all projects
echo "Verifica progetti nella solution..." | tee -a "$LOG_FILE"
SOLUTION_OUTPUT=$(timeout_cmd dotnet sln list 2>&1)
echo "$SOLUTION_OUTPUT" | tee -a "$LOG_FILE"

# Check each project is in solution
declare -a EXPECTED_PROJECTS=(
    "src/InsightLearn.Web/InsightLearn.Web.csproj"
    "src/InsightLearn.Api/InsightLearn.Api.csproj"
    "src/InsightLearn.Core/InsightLearn.Core.csproj"
    "src/InsightLearn.Infrastructure/InsightLearn.Infrastructure.csproj"
    "src/InsightLearn.AI/InsightLearn.AI.csproj"
)

for project in "${EXPECTED_PROJECTS[@]}"; do
    if echo "$SOLUTION_OUTPUT" | grep -q "$project"; then
        echo "‚úÖ PASS: Project $project found in solution" | tee -a "$LOG_FILE"
    else
        echo "‚ùå FAIL: Project $project NOT found in solution" | tee -a "$LOG_FILE"
        ((ERRORS++))
    fi
done

echo "\n=== VERIFICA CONTENUTO PROGETTI ===" | tee -a "$LOG_FILE"

# Function to check .csproj content
check_project_content() {
    local project_path="$1"
    local project_name="$2"
    local expected_packages="$3"
    
    echo "\n--- Verifica $project_name ---" | tee -a "$LOG_FILE"
    
    if [ -f "$project_path" ]; then
        echo "‚úÖ Project file exists: $project_path" | tee -a "$LOG_FILE"
        
        # Show project content
        echo "Contenuto $project_name:" | tee -a "$LOG_FILE"
        cat "$project_path" | tee -a "$LOG_FILE"
        
        # Check for expected packages
        IFS=',' read -ra PACKAGES <<< "$expected_packages"
        for package in "${PACKAGES[@]}"; do
            if grep -q "$package" "$project_path"; then
                echo "‚úÖ PASS: Package $package found in $project_name" | tee -a "$LOG_FILE"
            else
                echo "‚ö†Ô∏è  WARNING: Package $package not found in $project_name" | tee -a "$LOG_FILE"
                ((WARNINGS++))
            fi
        done
    else
        echo "‚ùå FAIL: Project file not found: $project_path" | tee -a "$LOG_FILE"
        ((ERRORS++))
    fi
}

# Check Web project
check_project_content "src/InsightLearn.Web/InsightLearn.Web.csproj" "Blazor Web" "Microsoft.AspNetCore.Authentication.JwtBearer,Microsoft.AspNetCore.Authentication.Google,Microsoft.Extensions.Caching.Redis,MudBlazor"

# Check API project  
check_project_content "src/InsightLearn.Api/InsightLearn.Api.csproj" "Web API" "Microsoft.EntityFrameworkCore.SqlServer,MongoDB.Driver,StackExchange.Redis,Elasticsearch.Net,Swashbuckle.AspNetCore"

# Check Core project
check_project_content "src/InsightLearn.Core/InsightLearn.Core.csproj" "Core" ""

# Check Infrastructure project
check_project_content "src/InsightLearn.Infrastructure/InsightLearn.Infrastructure.csproj" "Infrastructure" ""

# Check AI project
check_project_content "src/InsightLearn.AI/InsightLearn.AI.csproj" "AI" "RestSharp,Newtonsoft.Json"

echo "\n=== VERIFICA TARGET FRAMEWORK ===" | tee -a "$LOG_FILE"

# Check all projects use .NET 8.0
find src -name "*.csproj" -exec echo "=== {} ===" \; -exec grep -H "TargetFramework" {} \; | tee -a "$LOG_FILE"

echo "\n=== RIEPILOGO LIVELLO 2 ===" | tee -a "$LOG_FILE"
echo "Errori trovati: $ERRORS" | tee -a "$LOG_FILE"
echo "Warning: $WARNINGS" | tee -a "$LOG_FILE"

if [ $ERRORS -eq 0 ]; then
    echo "‚úÖ LIVELLO 2 SUPERATO: Progetti e configurazioni verificate" | tee -a "$LOG_FILE"
    if [ $WARNINGS -gt 0 ]; then
        echo "‚ö†Ô∏è  Attenzione: $WARNINGS warning da controllare" | tee -a "$LOG_FILE"
    fi
    exit 0
else
    echo "‚ùå LIVELLO 2 FALLITO: $ERRORS errori nei progetti" | tee -a "$LOG_FILE"
    exit 1
fi
```

---

## üèóÔ∏è LIVELLO 3: Verifica Dipendenze e Build

```bash
#!/bin/bash
# verification_level3_build.sh

set -e
set -u

# Setup logging
LOG_FILE="logs/verification_level3_$(date +%Y%m%d_%H%M%S).log"
mkdir -p logs
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE")

echo "========================================" | tee -a "$LOG_FILE"
echo "LIVELLO 3: VERIFICA DIPENDENZE E BUILD" | tee -a "$LOG_FILE"
echo "Data: $(date)" | tee -a "$LOG_FILE"
echo "========================================" | tee -a "$LOG_FILE"

# Timeout function
timeout_cmd() {
    timeout 600 "$@"
    local exit_code=$?
    if [ $exit_code -eq 124 ]; then
        echo "‚ùå ERROR: Command timed out after 10 minutes" | tee -a "$LOG_FILE"
        return 1
    fi
    return $exit_code
}

ERRORS=0
WARNINGS=0

cd InsightLearn.Cloud

echo "\n=== VERIFICA .NET SDK ===" | tee -a "$LOG_FILE"

# Check .NET SDK version
DOTNET_VERSION=$(timeout_cmd dotnet --version 2>&1)
echo "Versione .NET SDK: $DOTNET_VERSION" | tee -a "$LOG_FILE"

if echo "$DOTNET_VERSION" | grep -q "8.0"; then
    echo "‚úÖ PASS: .NET 8.0 SDK available" | tee -a "$LOG_FILE"
else
    echo "‚ö†Ô∏è  WARNING: .NET 8.0 SDK not detected, version: $DOTNET_VERSION" | tee -a "$LOG_FILE"
    ((WARNINGS++))
fi

echo "\n=== VERIFICA RESTORE PACKAGES ===" | tee -a "$LOG_FILE"

# Restore packages
echo "Eseguo dotnet restore..." | tee -a "$LOG_FILE"
RESTORE_OUTPUT=$(timeout_cmd dotnet restore 2>&1)
RESTORE_EXIT_CODE=$?

echo "$RESTORE_OUTPUT" | tee -a "$LOG_FILE"

if [ $RESTORE_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ PASS: Package restore successful" | tee -a "$LOG_FILE"
else
    echo "‚ùå FAIL: Package restore failed with exit code $RESTORE_EXIT_CODE" | tee -a "$LOG_FILE"
    ((ERRORS++))
fi

# Check for restore errors/warnings
if echo "$RESTORE_OUTPUT" | grep -i "error"; then
    echo "‚ùå FAIL: Restore errors detected" | tee -a "$LOG_FILE"
    ((ERRORS++))
fi

if echo "$RESTORE_OUTPUT" | grep -i "warning"; then
    echo "‚ö†Ô∏è  WARNING: Restore warnings detected" | tee -a "$LOG_FILE"
    ((WARNINGS++))
fi

echo "\n=== VERIFICA BUILD COMPLETA ===" | tee -a "$LOG_FILE"

# Build entire solution
echo "Eseguo dotnet build..." | tee -a "$LOG_FILE"
BUILD_OUTPUT=$(timeout_cmd dotnet build --configuration Release --verbosity normal 2>&1)
BUILD_EXIT_CODE=$?

echo "$BUILD_OUTPUT" | tee -a "$LOG_FILE"

if [ $BUILD_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ PASS: Solution build successful" | tee -a "$LOG_FILE"
else
    echo "‚ùå FAIL: Solution build failed with exit code $BUILD_EXIT_CODE" | tee -a "$LOG_FILE"
    ((ERRORS++))
fi

# Check for build errors/warnings
BUILD_ERRORS=$(echo "$BUILD_OUTPUT" | grep -c "error" || true)
BUILD_WARNINGS=$(echo "$BUILD_OUTPUT" | grep -c "warning" || true)

if [ $BUILD_ERRORS -gt 0 ]; then
    echo "‚ùå FAIL: $BUILD_ERRORS build errors found" | tee -a "$LOG_FILE"
    ((ERRORS++))
fi

if [ $BUILD_WARNINGS -gt 0 ]; then
    echo "‚ö†Ô∏è  WARNING: $BUILD_WARNINGS build warnings found" | tee -a "$LOG_FILE"
    ((WARNINGS++))
fi

echo "\n=== VERIFICA BUILD SINGOLI PROGETTI ===" | tee -a "$LOG_FILE"

# Build each project individually
declare -a PROJECTS=(
    "src/InsightLearn.Core/InsightLearn.Core.csproj"
    "src/InsightLearn.Infrastructure/InsightLearn.Infrastructure.csproj"
    "src/InsightLearn.AI/InsightLearn.AI.csproj"
    "src/InsightLearn.Api/InsightLearn.Api.csproj"
    "src/InsightLearn.Web/InsightLearn.Web.csproj"
)

for project in "${PROJECTS[@]}"; do
    echo "\n--- Build $project ---" | tee -a "$LOG_FILE"
    
    PROJECT_BUILD_OUTPUT=$(timeout_cmd dotnet build "$project" --configuration Release 2>&1)
    PROJECT_BUILD_EXIT_CODE=$?
    
    if [ $PROJECT_BUILD_EXIT_CODE -eq 0 ]; then
        echo "‚úÖ PASS: $project build successful" | tee -a "$LOG_FILE"
    else
        echo "‚ùå FAIL: $project build failed" | tee -a "$LOG_FILE"
        echo "$PROJECT_BUILD_OUTPUT" | tee -a "$LOG_FILE"
        ((ERRORS++))
    fi
done

echo "\n=== VERIFICA DIPENDENZE PACKAGES ===" | tee -a "$LOG_FILE"

# Check package dependencies
echo "Verifica dipendenze packages..." | tee -a "$LOG_FILE"
PACKAGES_OUTPUT=$(timeout_cmd dotnet list package --include-transitive 2>&1)
echo "$PACKAGES_OUTPUT" | tee -a "$LOG_FILE"

echo "\n=== RIEPILOGO LIVELLO 3 ===" | tee -a "$LOG_FILE"
echo "Errori trovati: $ERRORS" | tee -a "$LOG_FILE"
echo "Warning: $WARNINGS" | tee -a "$LOG_FILE"

if [ $ERRORS -eq 0 ]; then
    echo "‚úÖ LIVELLO 3 SUPERATO: Build e dipendenze verificate" | tee -a "$LOG_FILE"
    if [ $WARNINGS -gt 0 ]; then
        echo "‚ö†Ô∏è  Attenzione: $WARNINGS warning da monitorare" | tee -a "$LOG_FILE"
    fi
    exit 0
else
    echo "‚ùå LIVELLO 3 FALLITO: $ERRORS errori nel build" | tee -a "$LOG_FILE"
    exit 1
fi
```

---

## ‚ö° LIVELLO 4: Verifica Compatibilit√† e Performance

```bash
#!/bin/bash
# verification_level4_compatibility.sh

set -e
set -u

# Setup logging
LOG_FILE="logs/verification_level4_$(date +%Y%m%d_%H%M%S).log"
mkdir -p logs
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE")

echo "========================================" | tee -a "$LOG_FILE"
echo "LIVELLO 4: VERIFICA COMPATIBILIT√Ä E PERFORMANCE" | tee -a "$LOG_FILE"
echo "Data: $(date)" | tee -a "$LOG_FILE"
echo "========================================" | tee -a "$LOG_FILE"

# Timeout function
timeout_cmd() {
    timeout 600 "$@"
    local exit_code=$?
    if [ $exit_code -eq 124 ]; then
        echo "‚ùå ERROR: Command timed out after 10 minutes" | tee -a "$LOG_FILE"
        return 1
    fi
    return $exit_code
}

ERRORS=0
WARNINGS=0

cd InsightLearn.Cloud

echo "\n=== VERIFICA REQUISITI SISTEMA ===" | tee -a "$LOG_FILE"

# Check system requirements
echo "Sistema operativo: $(uname -a)" | tee -a "$LOG_FILE"
echo "Memoria disponibile: $(free -h | grep '^Mem:' || echo 'N/A')" | tee -a "$LOG_FILE"
echo "Spazio disco: $(df -h . | tail -1)" | tee -a "$LOG_FILE"

echo "\n=== VERIFICA COMPATIBILIT√Ä PACKAGES ===" | tee -a "$LOG_FILE"

# Check for package compatibility issues
echo "Controllo compatibilit√† packages..." | tee -a "$LOG_FILE"
COMPATIBILITY_OUTPUT=$(timeout_cmd dotnet list package --vulnerable --include-transitive 2>&1 || true)
echo "$COMPATIBILITY_OUTPUT" | tee -a "$LOG_FILE"

if echo "$COMPATIBILITY_OUTPUT" | grep -i "vulnerable"; then
    echo "‚ö†Ô∏è  WARNING: Vulnerable packages detected" | tee -a "$LOG_FILE"
    ((WARNINGS++))
else
    echo "‚úÖ PASS: No vulnerable packages detected" | tee -a "$LOG_FILE"
fi

echo "\n=== VERIFICA PERFORMANCE BUILD ===" | tee -a "$LOG_FILE"

# Measure build performance
echo "Misurazione performance build..." | tee -a "$LOG_FILE"
START_TIME=$(date +%s)

BUILD_PERF_OUTPUT=$(timeout_cmd dotnet build --configuration Release --verbosity quiet 2>&1)
BUILD_PERF_EXIT_CODE=$?

END_TIME=$(date +%s)
BUILD_DURATION=$((END_TIME - START_TIME))

echo "Build duration: ${BUILD_DURATION}s" | tee -a "$LOG_FILE"

if [ $BUILD_PERF_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ PASS: Performance build successful" | tee -a "$LOG_FILE"
    
    if [ $BUILD_DURATION -gt 300 ]; then
        echo "‚ö†Ô∏è  WARNING: Build took longer than 5 minutes ($BUILD_DURATION seconds)" | tee -a "$LOG_FILE"
        ((WARNINGS++))
    else
        echo "‚úÖ PASS: Build performance acceptable ($BUILD_DURATION seconds)" | tee -a "$LOG_FILE"
    fi
else
    echo "‚ùå FAIL: Performance build failed" | tee -a "$LOG_FILE"
    ((ERRORS++))
fi

echo "\n=== VERIFICA FILE OUTPUTS ===" | tee -a "$LOG_FILE"

# Check build outputs exist
declare -a EXPECTED_OUTPUTS=(
    "src/InsightLearn.Web/bin/Release"
    "src/InsightLearn.Api/bin/Release"
    "src/InsightLearn.Core/bin/Release"
    "src/InsightLearn.Infrastructure/bin/Release"
    "src/InsightLearn.AI/bin/Release"
)

for output in "${EXPECTED_OUTPUTS[@]}"; do
    if [ -d "$output" ]; then
        echo "‚úÖ PASS: Build output exists: $output" | tee -a "$LOG_FILE"
        
        # List files in output
        echo "Files in $output:" | tee -a "$LOG_FILE"
        ls -la "$output" | tee -a "$LOG_FILE"
    else
        echo "‚ùå FAIL: Build output missing: $output" | tee -a "$LOG_FILE"
        ((ERRORS++))
    fi
done

echo "\n=== VERIFICA ASSEMBLY INTEGRITY ===" | tee -a "$LOG_FILE"

# Check DLL files are valid
find . -name "*.dll" -path "*/bin/Release/*" -exec echo "Checking: {}" \; -exec file {} \; | tee -a "$LOG_FILE"

echo "\n=== RIEPILOGO LIVELLO 4 ===" | tee -a "$LOG_FILE"
echo "Errori trovati: $ERRORS" | tee -a "$LOG_FILE"
echo "Warning: $WARNINGS" | tee -a "$LOG_FILE"
echo "Build performance: ${BUILD_DURATION}s" | tee -a "$LOG_FILE"

if [ $ERRORS -eq 0 ]; then
    echo "‚úÖ LIVELLO 4 SUPERATO: Compatibilit√† e performance verificate" | tee -a "$LOG_FILE"
    if [ $WARNINGS -gt 0 ]; then
        echo "‚ö†Ô∏è  Attenzione: $WARNINGS warning da ottimizzare" | tee -a "$LOG_FILE"
    fi
    exit 0
else
    echo "‚ùå LIVELLO 4 FALLITO: $ERRORS errori di compatibilit√†" | tee -a "$LOG_FILE"
    exit 1
fi
```

---

## üìä LIVELLO 5: Verifica Finale e Report

```bash
#!/bin/bash
# verification_level5_final_report.sh

set -e
set -u

# Setup logging
LOG_FILE="logs/verification_level5_$(date +%Y%m%d_%H%M%S).log"
REPORT_FILE="logs/PHASE1_FINAL_REPORT_$(date +%Y%m%d_%H%M%S).md"
mkdir -p logs
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE")

echo "========================================" | tee -a "$LOG_FILE"
echo "LIVELLO 5: VERIFICA FINALE E REPORT" | tee -a "$LOG_FILE"
echo "Data: $(date)" | tee -a "$LOG_FILE"
echo "========================================" | tee -a "$LOG_FILE"

cd InsightLearn.Cloud

# Initialize report
cat > "$REPORT_FILE" << 'EOF'
# InsightLearn.Cloud - Report Verifica Fase 1

## üìÖ Informazioni Generali
EOF

echo "- **Data Verifica**: $(date)" >> "$REPORT_FILE"
echo "- **Directory Progetto**: $(pwd)" >> "$REPORT_FILE"
echo "- **Versione .NET**: $(dotnet --version)" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "\n=== ESECUZIONE VERIFICHE COMPLETE ===" | tee -a "$LOG_FILE"

TOTAL_ERRORS=0
TOTAL_WARNINGS=0

# Execute all verification levels
echo "## üìä Risultati Verifiche" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Level 1
echo "### Livello 1: Struttura Base" >> "$REPORT_FILE"
if bash verification_level1_structure.sh > /dev/null 2>&1; then
    echo "- ‚úÖ **SUPERATO**: Struttura base verificata" >> "$REPORT_FILE"
    echo "‚úÖ Livello 1: SUPERATO" | tee -a "$LOG_FILE"
else
    echo "- ‚ùå **FALLITO**: Problemi nella struttura base" >> "$REPORT_FILE"
    echo "‚ùå Livello 1: FALLITO" | tee -a "$LOG_FILE"
    ((TOTAL_ERRORS++))
fi

# Level 2
echo "" >> "$REPORT_FILE"
echo "### Livello 2: Progetti e Configurazioni" >> "$REPORT_FILE"
if bash verification_level2_projects.sh > /dev/null 2>&1; then
    echo "- ‚úÖ **SUPERATO**: Progetti verificati" >> "$REPORT_FILE"
    echo "‚úÖ Livello 2: SUPERATO" | tee -a "$LOG_FILE"
else
    echo "- ‚ùå **FALLITO**: Problemi nei progetti" >> "$REPORT_FILE" 
    echo "‚ùå Livello 2: FALLITO" | tee -a "$LOG_FILE"
    ((TOTAL_ERRORS++))
fi

# Level 3
echo "" >> "$REPORT_FILE"
echo "### Livello 3: Build e Dipendenze" >> "$REPORT_FILE"
if bash verification_level3_build.sh > /dev/null 2>&1; then
    echo "- ‚úÖ **SUPERATO**: Build verificato" >> "$REPORT_FILE"
    echo "‚úÖ Livello 3: SUPERATO" | tee -a "$LOG_FILE"
else
    echo "- ‚ùå **FALLITO**: Problemi nel build" >> "$REPORT_FILE"
    echo "‚ùå Livello 3: FALLITO" | tee -a "$LOG_FILE"
    ((TOTAL_ERRORS++))
fi

# Level 4
echo "" >> "$REPORT_FILE"
echo "### Livello 4: Compatibilit√† e Performance" >> "$REPORT_FILE"
if bash verification_level4_compatibility.sh > /dev/null 2>&1; then
    echo "- ‚úÖ **SUPERATO**: Compatibilit√† verificata" >> "$REPORT_FILE"
    echo "‚úÖ Livello 4: SUPERATO" | tee -a "$LOG_FILE"
else
    echo "- ‚ùå **FALLITO**: Problemi di compatibilit√†" >> "$REPORT_FILE"
    echo "‚ùå Livello 4: FALLITO" | tee -a "$LOG_FILE"
    ((TOTAL_ERRORS++))
fi

echo "" >> "$REPORT_FILE"

# Final comprehensive check
echo "\n=== VERIFICA FINALE COMPLETA ===" | tee -a "$LOG_FILE"

echo "## üîç Verifica Finale Dettagliata" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Check solution integrity one more time
echo "### Solution Integrity" >> "$REPORT_FILE"
SOLUTION_LIST=$(dotnet sln list)
PROJECT_COUNT=$(echo "$SOLUTION_LIST" | grep ".csproj" | wc -l)
echo "- **Progetti nella solution**: $PROJECT_COUNT" >> "$REPORT_FILE"
echo "- **Progetti attesi**: 5" >> "$REPORT_FILE"

if [ $PROJECT_COUNT -eq 5 ]; then
    echo "- ‚úÖ **Status**: Tutti i progetti presenti" >> "$REPORT_FILE"
else
    echo "- ‚ùå **Status**: Progetti mancanti" >> "$REPORT_FILE"
    ((TOTAL_ERRORS++))
fi

# Final build test
echo "" >> "$REPORT_FILE"
echo "### Build Test Finale" >> "$REPORT_FILE"
BUILD_START=$(date +%s)
if dotnet build --configuration Release --verbosity quiet > /dev/null 2>&1; then
    BUILD_END=$(date +%s)
    BUILD_TIME=$((BUILD_END - BUILD_START))
    echo "- ‚úÖ **Build Status**: Successful" >> "$REPORT_FILE"
    echo "- ‚è±Ô∏è **Build Time**: ${BUILD_TIME}s" >> "$REPORT_FILE"
else
    echo "- ‚ùå **Build Status**: Failed" >> "$REPORT_FILE"
    ((TOTAL_ERRORS++))
fi

# Generate final statistics
echo "" >> "$REPORT_FILE"
echo "## üìà Statistiche Finali" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "- **Errori Totali**: $TOTAL_ERRORS" >> "$REPORT_FILE"
echo "- **Warning Totali**: $TOTAL_WARNINGS" >> "$REPORT_FILE"
echo "- **File di Log**: $(ls -1 logs/ | wc -l) file generati" >> "$REPORT_FILE"
echo "- **Dimensione Progetto**: $(du -sh . | cut -f1)" >> "$REPORT_FILE"

# Final verdict
echo "" >> "$REPORT_FILE"
echo "## üéØ Verdetto Finale" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

if [ $TOTAL_ERRORS -eq 0 ]; then
    echo "### ‚úÖ FASE 1 COMPLETATA CON SUCCESSO" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    echo "La verifica completa della Fase 1 √® stata superata. L'infrastruttura base di InsightLearn.Cloud √® pronta per la Fase 2." >> "$REPORT_FILE"
    
    echo "‚úÖ VERIFICA COMPLETA: FASE 1 SUPERATA" | tee -a "$LOG_FILE"
    echo "üìä Report generato: $REPORT_FILE" | tee -a "$LOG_FILE"
    
    exit 0
else
    echo "### ‚ùå FASE 1 RICHIEDE CORREZIONI" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE" 
    echo "Sono stati rilevati $TOTAL_ERRORS errori che devono essere corretti prima di procedere alla Fase 2." >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    echo "**Azioni necessarie:**" >> "$REPORT_FILE"
    echo "1. Controllare i log di verifica dettagliati" >> "$REPORT_FILE"
    echo "2. Correggere gli errori identificati" >> "$REPORT_FILE"
    echo "3. Rieseguire la verifica completa" >> "$REPORT_FILE"
    
    echo "‚ùå VERIFICA COMPLETA: FASE 1 FALLITA ($TOTAL_ERRORS errori)" | tee -a "$LOG_FILE"
    echo "üìä Report generato: $REPORT_FILE" | tee -a "$LOG_FILE"
    
    exit 1
fi
```

---

## üöÄ SCRIPT MASTER DI ESECUZIONE

```bash
#!/bin/bash
# master_verification_phase1.sh

echo "üîç InsightLearn.Cloud - Verifica Completa Fase 1"
echo "=============================================="

# Create verification scripts directory
mkdir -p verification_scripts

# Write all verification scripts
cat > verification_scripts/verification_level1_structure.sh << 'SCRIPT1'
[... codice del Livello 1 ...]
SCRIPT1

cat > verification_scripts/verification_level2_projects.sh << 'SCRIPT2' 
[... codice del Livello 2 ...]
SCRIPT2

cat > verification_scripts/verification_level3_build.sh << 'SCRIPT3'
[... codice del Livello 3 ...]
SCRIPT3

cat > verification_scripts/verification_level4_compatibility.sh << 'SCRIPT4'
[... codice del Livello 4 ...]
SCRIPT4

cat > verification_scripts/verification_level5_final_report.sh << 'SCRIPT5'
[... codice del Livello 5 ...]
SCRIPT5

# Make scripts executable
chmod +x verification_scripts/*.sh

echo "üìã Esecuzione verifica multi-level..."

# Execute final verification with report
cd verification_scripts
bash verification_level5_final_report.sh

echo ""
echo "‚úÖ Verifica completa terminata"
echo "üìä Controlla il file di report in logs/PHASE1_FINAL_REPORT_*.md"
```

## üìù Istruzioni per Claude Code

**ESEGUI IN QUESTO ORDINE:**

1. **Salva tutti gli script di verifica** in file separati
2. **Esegui il master script**: `bash master_verification_phase1.sh`
3. **Analizza il report finale** generato
4. **Se ci sono errori**: correggi e riesegui la verifica
5. **Solo quando tutto √® ‚úÖ**: procedi alla Fase 2

## ‚úÖ Criteri di Successo Assoluto

La Fase 1 √® verificata e pronta per la Fase 2 SOLO quando:

- [x] **Livello 1**: Struttura completa senza errori
- [x] **Livello 2**: Tutti i progetti configurati correttamente  
- [x] **Livello 3**: Build completo senza errori
- [x] **Livello 4**: Compatibilit√† e performance accettabili
- [x] **Livello 5**: Report finale con 0 errori totali

**Il report finale deve mostrare: "‚úÖ FASE 1 COMPLETATA CON SUCCESSO"**