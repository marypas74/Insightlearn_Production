---
apiVersion: v1
kind: Namespace
metadata:
  name: insightlearn

---
# Certificato SSL auto-firmato
apiVersion: v1
kind: Secret
metadata:
  name: insightlearn-tls
  namespace: insightlearn
type: kubernetes.io/tls
data:
  # Certificato e chiave saranno generati dopo
  tls.crt: ""
  tls.key: ""

---
# ConfigMap per configurazione
apiVersion: v1
kind: ConfigMap
metadata:
  name: insightlearn-config
  namespace: insightlearn
data:
  ASPNETCORE_ENVIRONMENT: "Production"
  ASPNETCORE_URLS: "http://+:80"
  JwtSettings__Issuer: "InsightLearn.Api"
  JwtSettings__Audience: "InsightLearn.Users"
  JwtSettings__ExpirationDays: "7"
  Logging__LogLevel__Default: "Information"
  Logging__LogLevel__Microsoft: "Warning"
  BLAZOR_DETAILED_ERRORS: "false"

---
# Secret per password database
apiVersion: v1
kind: Secret
metadata:
  name: insightlearn-secrets
  namespace: insightlearn
type: Opaque
data:
  # Base64 encoded: ElevateLearning2024StrongPass!
  SA_PASSWORD: RWxldmF0ZUxlYXJuaW5nMjAyNFN0cm9uZ1Bhc3Mh
  # Base64 encoded: ElevateLearning2024SecureJwtSigningKey123456789!
  JWT_SECRET: RWxldmF0ZUxlYXJuaW5nMjAyNFNlY3VyZUp3dFNpZ25pbmdLZXkxMjM0NTY3ODkh

---
# SQL Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sqlserver
  namespace: insightlearn
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sqlserver
  template:
    metadata:
      labels:
        app: sqlserver
    spec:
      containers:
      - name: sqlserver
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports:
        - containerPort: 1433
        env:
        - name: ACCEPT_EULA
          value: "Y"
        - name: SA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: insightlearn-secrets
              key: SA_PASSWORD
        - name: MSSQL_PID
          value: Developer
        volumeMounts:
        - name: mssql-data
          mountPath: /var/opt/mssql
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: mssql-data
        persistentVolumeClaim:
          claimName: mssql-pvc

---
# PVC for SQL Server
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mssql-pvc
  namespace: insightlearn
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# SQL Server Service
apiVersion: v1
kind: Service
metadata:
  name: sqlserver
  namespace: insightlearn
spec:
  selector:
    app: sqlserver
  ports:
  - port: 1433
    targetPort: 1433
  type: ClusterIP

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: insightlearn
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--appendonly", "yes", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: redis-data
        emptyDir: {}

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: insightlearn
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: insightlearn
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api
        image: insightlearn-api:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        env:
        - name: ASPNETCORE_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: insightlearn-config
              key: ASPNETCORE_ENVIRONMENT
        - name: ASPNETCORE_URLS
          valueFrom:
            configMapKeyRef:
              name: insightlearn-config
              key: ASPNETCORE_URLS
        - name: ConnectionStrings__DefaultConnection
          value: "Server=sqlserver;Database=InsightLearnDb;User=sa;Password=$(SA_PASSWORD);TrustServerCertificate=true;MultipleActiveResultSets=true"
        - name: SA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: insightlearn-secrets
              key: SA_PASSWORD
        - name: Redis__ConnectionString
          value: "redis:6379"
        - name: JwtSettings__SecretKey
          valueFrom:
            secretKeyRef:
              name: insightlearn-secrets
              key: JWT_SECRET
        - name: JwtSettings__Issuer
          valueFrom:
            configMapKeyRef:
              name: insightlearn-config
              key: JwtSettings__Issuer
        - name: JwtSettings__Audience
          valueFrom:
            configMapKeyRef:
              name: insightlearn-config
              key: JwtSettings__Audience
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# API Service
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: insightlearn
spec:
  selector:
    app: api
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
# Web Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: insightlearn
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - name: web
        image: insightlearn-web:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        env:
        - name: ASPNETCORE_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: insightlearn-config
              key: ASPNETCORE_ENVIRONMENT
        - name: ASPNETCORE_URLS
          valueFrom:
            configMapKeyRef:
              name: insightlearn-config
              key: ASPNETCORE_URLS
        - name: ConnectionStrings__DefaultConnection
          value: "Server=sqlserver;Database=InsightLearnDb;User=sa;Password=$(SA_PASSWORD);TrustServerCertificate=true;MultipleActiveResultSets=true"
        - name: SA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: insightlearn-secrets
              key: SA_PASSWORD
        - name: Redis__ConnectionString
          value: "redis:6379"
        - name: ApiSettings__BaseUrl
          value: "http://api:80/"
        - name: JwtSettings__SecretKey
          valueFrom:
            secretKeyRef:
              name: insightlearn-secrets
              key: JWT_SECRET
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Web Service
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: insightlearn
spec:
  selector:
    app: web
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
# NGINX ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: insightlearn
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }

    http {
        upstream web_backend {
            server web:80;
        }

        upstream api_backend {
            server api:80;
        }

        server {
            listen 80;
            listen 443 ssl;
            server_name 192.168.1.103;

            ssl_certificate /etc/nginx/ssl/tls.crt;
            ssl_certificate_key /etc/nginx/ssl/tls.key;

            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers HIGH:!aNULL:!MD5;

            # Redirect HTTP to HTTPS
            if ($scheme != "https") {
                return 301 https://$server_name$request_uri;
            }

            location / {
                proxy_pass http://web_backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_buffer_size 128k;
                proxy_buffers 4 256k;
                proxy_busy_buffers_size 256k;
            }

            location /api {
                proxy_pass http://api_backend;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }

---
# NGINX Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: insightlearn
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: tls-certs
          mountPath: /etc/nginx/ssl
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: tls-certs
        secret:
          secretName: insightlearn-tls

---
# NGINX Service with NodePort for external access
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: insightlearn
spec:
  selector:
    app: nginx
  type: NodePort
  ports:
  - name: http
    port: 80
    targetPort: 80
    nodePort: 31080
  - name: https
    port: 443
    targetPort: 443
    nodePort: 31443

# Ingress rimosso - usando NodePort per accesso diretto via IP